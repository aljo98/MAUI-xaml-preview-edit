{"version":3,"file":"templateManager.js","sourceRoot":"","sources":["../src/templateManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\nexport interface TemplateItem {\r\n  id: string;\r\n  name: string;\r\n  category?: string;\r\n  description?: string;\r\n  xaml: string;\r\n}\r\n\r\nexport class TemplateManager {\r\n  private _templates: TemplateItem[] = [];\r\n  private _extensionUri: vscode.Uri;\r\n\r\n  constructor(extensionUri: vscode.Uri) {\r\n    this._extensionUri = extensionUri;\r\n  }\r\n\r\n  public getTemplates(): TemplateItem[] {\r\n    return this._templates;\r\n  }\r\n\r\n  public async loadTemplates(): Promise<void> {\r\n    // 1) Try to load from extension bundled json\r\n    const bundled = vscode.Uri.joinPath(this._extensionUri, 'templates', 'default-templates.json');\r\n    try {\r\n      const data = await vscode.workspace.fs.readFile(bundled);\r\n      const parsed = JSON.parse(Buffer.from(data).toString('utf8')) as TemplateItem[];\r\n      if (Array.isArray(parsed) && parsed.length) {\r\n        this._templates = parsed;\r\n      }\r\n    } catch (err) {\r\n      // ignore; will fall back\r\n    }\r\n\r\n    // 2) Optional: load workspace override .vscode/maui-templates.json and merge\r\n    try {\r\n      const folders = vscode.workspace.workspaceFolders || [];\r\n      for (const f of folders) {\r\n        const candidate = vscode.Uri.joinPath(f.uri, '.vscode', 'maui-templates.json');\r\n        const stat = await vscode.workspace.fs.stat(candidate).then(s => s, () => undefined);\r\n        if (stat) {\r\n          const data = await vscode.workspace.fs.readFile(candidate);\r\n          const parsed = JSON.parse(Buffer.from(data).toString('utf8')) as TemplateItem[];\r\n          if (Array.isArray(parsed)) {\r\n            // merge: workspace overrides extension by id\r\n            const map = new Map<string, TemplateItem>(this._templates.map(t => [t.id, t]));\r\n            for (const t of parsed) map.set(t.id, t);\r\n            this._templates = Array.from(map.values());\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      // ignore\r\n    }\r\n\r\n    // 3) Hardcoded fallback if none loaded\r\n    if (!this._templates.length) {\r\n      this._templates = [\r\n        {\r\n          id: 'tpl_border_basic',\r\n          name: 'Border – Basic',\r\n          category: 'Layout',\r\n          description: 'Border with padding and rounded corners',\r\n          xaml: '<Border Stroke=\"#1B1F2A\" StrokeThickness=\"1\" BackgroundColor=\"#FFFFFF\" Padding=\"16\" CornerRadius=\"8\">\\n  <StackLayout Spacing=\"8\">\\n    <Label Text=\"Title\" FontAttributes=\"Bold\" FontSize=\"18\" />\\n    <Label Text=\"Subtitle or content goes here...\" TextColor=\"#4B5563\" />\\n  </StackLayout>\\n</Border>'\r\n        },\r\n        {\r\n          id: 'tpl_grid_two_columns',\r\n          name: 'Grid – 2 Columns',\r\n          category: 'Layout',\r\n          description: 'Grid with two columns and sample content',\r\n          xaml: '<Grid ColumnDefinitions=\"Auto,*\" RowDefinitions=\"Auto,Auto\" ColumnSpacing=\"8\" RowSpacing=\"8\">\\n  <Label Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Label:\" FontAttributes=\"Bold\" />\\n  <Entry Grid.Row=\"0\" Grid.Column=\"1\" Placeholder=\"Type here\" />\\n  <Label Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Another:\" FontAttributes=\"Bold\" />\\n  <Entry Grid.Row=\"1\" Grid.Column=\"1\" Placeholder=\"Value\" />\\n</Grid>'\r\n        },\r\n        {\r\n          id: 'tpl_boxview_separator',\r\n          name: 'BoxView – Separator',\r\n          category: 'Utility',\r\n          description: 'Thin separator line',\r\n          xaml: '<BoxView HeightRequest=\"1\" BackgroundColor=\"#E5E7EB\" Margin=\"8,12\" />'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n"]}