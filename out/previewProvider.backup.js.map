{"version":3,"file":"previewProvider.backup.js","sourceRoot":"","sources":["../src/previewProvider.backup.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { XMLParser } from 'fast-xml-parser';\n\nimport { MauiPropertiesProvider, XamlElement, ElementProperty } from './propertiesProvider';\n\nexport class MauiXamlPreviewProvider implements vscode.WebviewPanelSerializer {\n    private static readonly viewType = 'mauiXamlPreview';\n    private readonly _extensionUri: vscode.Uri;\n    private _currentPanel: vscode.WebviewPanel | undefined;\n    private _currentDocument: vscode.TextDocument | undefined;\n    private _currentPlatform: string = 'android';\n    private _elementHighlightDecoration: vscode.TextEditorDecorationType | undefined;\n    private _elementMap: Map<string, { startLine: number, endLine: number, elementName: string }> = new Map();\n    private _propertiesProvider: MauiPropertiesProvider | undefined;\n    private _resourceDictionary: Map<string, any> = new Map();\n    private _themeColors: Map<string, string> = new Map();\n    private _styleCache: Map<string, any> = new Map();\n\n    constructor(extensionUri: vscode.Uri) {\n        this._extensionUri = extensionUri;\n    }\n\n    public setElementHighlightDecoration(decoration: vscode.TextEditorDecorationType) {\n        this._elementHighlightDecoration = decoration;\n    }\n\n    public setPropertiesProvider(provider: MauiPropertiesProvider) {\n        this._propertiesProvider = provider;\n    }\n\n    public updateElementProperty(property: ElementProperty, newValue: string) {\n        // Update the property in the current document\n        if (this._currentPanel) {\n            this._currentPanel.webview.postMessage({\n                type: 'updateProperty',\n                property: property.key,\n                value: newValue\n            });\n        }\n\n        // Update in properties provider\n        if (this._propertiesProvider) {\n            this._propertiesProvider.refresh();\n        }\n    }\n\n    public async deserializeWebviewPanel(webviewPanel: vscode.WebviewPanel, state: any): Promise<void> {\n        this._currentPanel = webviewPanel;\n        this._configureWebview(webviewPanel.webview);\n    }\n\n    public openPreview(document: vscode.TextDocument) {\n        this._currentDocument = document;\n\n        if (this._currentPanel) {\n            this._currentPanel.reveal(vscode.ViewColumn.Beside);\n            this.updatePreview(document);\n            return;\n        }\n\n        this._currentPanel = vscode.window.createWebviewPanel(\n            MauiXamlPreviewProvider.viewType,\n            `MAUI Preview: ${document.fileName.split('/').pop()}`,\n            vscode.ViewColumn.Beside,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [this._extensionUri]\n            }\n        );\n\n        this._configureWebview(this._currentPanel.webview);\n        this.updatePreview(document);\n\n        // Zagotovimo da se properties prikažejo\n        setTimeout(() => {\n            this._sendPropertiesDataToSidebar();\n        }, 200);\n\n        this._currentPanel.onDidDispose(() => {\n            this._currentPanel = undefined;\n        }, null);\n    }\n\n    public updatePreview(document: vscode.TextDocument) {\n        if (!this._currentPanel) {\n            return;\n        }\n\n        console.log('[Preview] Updating preview for:', document.fileName);\n        const xamlContent = document.getText();\n        \n        // Load related resources and styles\n        this._loadResourceDictionaries(document);\n        this._initializeThemeColors();\n        \n        this._buildElementMap(xamlContent);\n        const htmlContent = this._generatePreviewHtml(xamlContent);\n        this._currentPanel.webview.html = htmlContent;\n        \n        // Update properties panel with current document structure\n        this._sendPropertiesDataToSidebar();\n        \n        console.log('[Preview] Preview updated successfully');\n    }\n\n    private _configureWebview(webview: vscode.Webview) {\n        webview.onDidReceiveMessage(\n            message => {\n                switch (message.type) {\n                    case 'elementSelected':\n                        this._handleElementSelection(message.elementId, message.elementType, message.properties);\n                        break;\n                    case 'propertyChanged':\n                        this._handlePropertyChange(message.elementId, message.property, message.value);\n                        break;\n                    case 'platformChanged':\n                        this._handlePlatformChange(message.platform);\n                        break;\n                    case 'elementMoved':\n                        this._handleElementMove(message.elementId, message.position);\n                        break;\n                    case 'elementResized':\n                        this._handleElementResize(message.elementId, message.size);\n                        break;\n                    case 'elementRotated':\n                        this._handleElementRotation(message.elementId, message.rotation);\n                        break;\n                    case 'requestPropertiesData':\n                        this._sendPropertiesDataToSidebar();\n                        break;\n                }\n            }\n        );\n    }\n\n    private _sendPropertiesDataToSidebar() {\n        if (!this._currentDocument || !this._propertiesProvider) return;\n\n        const xamlContent = this._currentDocument.getText();\n        const parsedXaml = this._parseXaml(xamlContent);\n        \n        if (parsedXaml) {\n            const elements = this._extractElementsFromParsedXaml(parsedXaml);\n            this._propertiesProvider.setElements(elements);\n        }\n    }\n\n    private _extractElementsFromParsedXaml(node: any, parentId?: string): XamlElement[] {\n        const elements: XamlElement[] = [];\n        \n        if (typeof node !== 'object' || node === null) {\n            return elements;\n        }\n\n        for (const [key, value] of Object.entries(node)) {\n            if (key.startsWith('@_')) continue;\n\n            const elementId = `element_${Math.random().toString(36).substr(2, 9)}`;\n            const attributes = this._extractAttributes(value);\n            const properties = this._buildPropertiesFromAttributes(key, attributes);\n            \n            const element: XamlElement = {\n                id: elementId,\n                type: key,\n                name: attributes.Name || attributes['x:Name'] || key,\n                properties: properties,\n                children: []\n            };\n\n            // Recursively extract child elements\n            if (typeof value === 'object' && value !== null) {\n                const childElements = this._getChildElements(value);\n                for (const child of childElements) {\n                    element.children.push(...this._extractElementsFromParsedXaml(child, elementId));\n                }\n            }\n\n            elements.push(element);\n        }\n\n        return elements;\n    }\n\n    private _buildPropertiesFromAttributes(elementType: string, attributes: { [key: string]: string }): ElementProperty[] {\n        const properties: ElementProperty[] = [];\n        \n        // Common layout properties\n        properties.push(\n            { key: 'Width', value: attributes.Width || '', type: 'string', section: 'layout' },\n            { key: 'Height', value: attributes.Height || '', type: 'string', section: 'layout' },\n            { key: 'Margin', value: attributes.Margin || '', type: 'string', section: 'layout' },\n            { key: 'Padding', value: attributes.Padding || '', type: 'string', section: 'layout' },\n            { key: 'HorizontalOptions', value: attributes.HorizontalOptions || '', type: 'select', options: ['Start', 'Center', 'End', 'Fill', 'StartAndExpand', 'CenterAndExpand', 'EndAndExpand', 'FillAndExpand'], section: 'layout' },\n            { key: 'VerticalOptions', value: attributes.VerticalOptions || '', type: 'select', options: ['Start', 'Center', 'End', 'Fill', 'StartAndExpand', 'CenterAndExpand', 'EndAndExpand', 'FillAndExpand'], section: 'layout' }\n        );\n        \n        // Common appearance properties\n        properties.push(\n            { key: 'BackgroundColor', value: attributes.BackgroundColor || '', type: 'color', section: 'appearance' },\n            { key: 'Opacity', value: attributes.Opacity || '1', type: 'number', section: 'appearance' },\n            { key: 'IsVisible', value: attributes.IsVisible || 'True', type: 'boolean', section: 'appearance' }\n        );\n        \n        // Element-specific properties\n        switch (elementType) {\n            case 'Label':\n                properties.push(\n                    { key: 'Text', value: attributes.Text || '', type: 'string', section: 'appearance' },\n                    { key: 'TextColor', value: attributes.TextColor || '', type: 'color', section: 'appearance' },\n                    { key: 'FontSize', value: attributes.FontSize || '', type: 'number', section: 'appearance' },\n                    { key: 'FontAttributes', value: attributes.FontAttributes || '', type: 'select', options: ['None', 'Bold', 'Italic', 'Bold,Italic'], section: 'appearance' }\n                );\n                break;\n                \n            case 'Button':\n                properties.push(\n                    { key: 'Text', value: attributes.Text || '', type: 'string', section: 'appearance' },\n                    { key: 'TextColor', value: attributes.TextColor || '', type: 'color', section: 'appearance' },\n                    { key: 'FontSize', value: attributes.FontSize || '', type: 'number', section: 'appearance' },\n                    { key: 'CornerRadius', value: attributes.CornerRadius || '', type: 'number', section: 'appearance' }\n                );\n                break;\n                \n            case 'Entry':\n            case 'Editor':\n                properties.push(\n                    { key: 'Text', value: attributes.Text || '', type: 'string', section: 'appearance' },\n                    { key: 'Placeholder', value: attributes.Placeholder || '', type: 'string', section: 'appearance' },\n                    { key: 'PlaceholderColor', value: attributes.PlaceholderColor || '', type: 'color', section: 'appearance' },\n                    { key: 'TextColor', value: attributes.TextColor || '', type: 'color', section: 'appearance' }\n                );\n                break;\n                \n            case 'Frame':\n            case 'Border':\n                properties.push(\n                    { key: 'BorderColor', value: attributes.BorderColor || '', type: 'color', section: 'appearance' },\n                    { key: 'CornerRadius', value: attributes.CornerRadius || '', type: 'number', section: 'appearance' },\n                    { key: 'HasShadow', value: attributes.HasShadow || 'False', type: 'boolean', section: 'appearance' }\n                );\n                break;\n                \n            case 'Image':\n                properties.push(\n                    { key: 'Source', value: attributes.Source || '', type: 'string', section: 'appearance' },\n                    { key: 'Aspect', value: attributes.Aspect || '', type: 'select', options: ['AspectFit', 'AspectFill', 'Fill'], section: 'appearance' }\n                );\n                break;\n                \n            case 'Grid':\n                properties.push(\n                    { key: 'RowDefinitions', value: attributes.RowDefinitions || '', type: 'string', section: 'layout' },\n                    { key: 'ColumnDefinitions', value: attributes.ColumnDefinitions || '', type: 'string', section: 'layout' },\n                    { key: 'RowSpacing', value: attributes.RowSpacing || '', type: 'number', section: 'layout' },\n                    { key: 'ColumnSpacing', value: attributes.ColumnSpacing || '', type: 'number', section: 'layout' }\n                );\n                break;\n                \n            case 'StackLayout':\n                properties.push(\n                    { key: 'Orientation', value: attributes.Orientation || 'Vertical', type: 'select', options: ['Vertical', 'Horizontal'], section: 'layout' },\n                    { key: 'Spacing', value: attributes.Spacing || '', type: 'number', section: 'layout' }\n                );\n                break;\n        }\n        \n        // Add any additional attributes that weren't covered\n        for (const [key, value] of Object.entries(attributes)) {\n            if (!properties.some(p => p.key === key)) {\n                properties.push({\n                    key: key,\n                    value: value,\n                    type: 'string',\n                    section: 'structure'\n                });\n            }\n        }\n        \n        return properties.filter(p => p.value !== ''); // Only include properties with values\n    }\n\n    private _buildXamlElementForId(id: string, type: string, properties: any): XamlElement {\n        const props: ElementProperty[] = [\n            { key: 'Width', value: '', type: 'number', section: 'layout' },\n            { key: 'Height', value: '', type: 'number', section: 'layout' },\n            { key: 'X', value: '', type: 'number', section: 'layout' },\n            { key: 'Y', value: '', type: 'number', section: 'layout' },\n            { key: 'Background', value: '', type: 'color', section: 'appearance' },\n            { key: 'Opacity', value: '1', type: 'number', section: 'appearance' }\n        ];\n        if (properties) {\n            for (const [k, v] of Object.entries(properties)) {\n                props.push({ key: k, value: String(v), type: 'string', section: 'appearance' });\n            }\n        }\n\n        return {\n            id: id,\n            type: type,\n            name: type,\n            properties: props,\n            children: []\n        };\n    }\n\n    private _generatePreviewHtml(xamlContent: string): string {\n        const parsedXaml = this._parseXaml(xamlContent);\n        const mobilePreview = this._generateMobilePreview(parsedXaml);\n        const elementStructure = this._generateElementStructure(parsedXaml);\n\n        return `<!DOCTYPE html>\n        <html lang=\"sl\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>MAUI XAML Preview</title>\n            <!-- Removed external icon CSS to avoid network dependency in webview -->\n            <style>\n                * { box-sizing: border-box; }\n\n                body {\n                    margin: 0;\n                    padding: 0;\n                    background: #1e1e1e;\n                    color: #fff;\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                    overflow: hidden;\n                    height: 100vh;\n                }\n\n                .app-container {\n                    display: flex;\n                    height: 100vh;\n                    flex-direction: column;\n                }\n\n                .main-toolbar {\n                    background: #2d2d30;\n                    padding: 8px 16px;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    border-bottom: 1px solid #3c3c3c;\n                    flex-shrink: 0;\n                    gap: 16px;\n                }\n\n                .zoom-controls {\n                    display: flex;\n                    align-items: center;\n                    gap: 4px;\n                    background: #383838;\n                    border-radius: 4px;\n                    padding: 4px;\n                }\n\n                .zoom-btn {\n                    background: #4a4a4a;\n                    border: none;\n                    color: #fff;\n                    padding: 4px 8px;\n                    border-radius: 3px;\n                    cursor: pointer;\n                    font-size: 11px;\n                    transition: background 0.2s;\n                    min-width: 28px;\n                    text-align: center;\n                }\n\n                .zoom-btn:hover {\n                    background: #5a5a5a;\n                }\n\n                .zoom-btn.active {\n                    background: #0078d4;\n                }\n\n                .zoom-level {\n                    color: #ccc;\n                    font-size: 11px;\n                    min-width: 45px;\n                    text-align: center;\n                    background: #2d2d30;\n                    padding: 4px 6px;\n                    border-radius: 3px;\n                }\n\n                .toolbar-left {\n                    display: flex;\n                    gap: 12px;\n                    align-items: center;\n                }\n\n                .toolbar-right {\n                    display: flex;\n                    gap: 12px;\n                    align-items: center;\n                }\n\n                .mode-selector {\n                    display: flex;\n                    background: #3c3c3c;\n                    border-radius: 6px;\n                    overflow: hidden;\n                }\n\n                .mode-btn {\n                    background: transparent;\n                    border: none;\n                    color: #ccc;\n                    padding: 8px 16px;\n                    cursor: pointer;\n                    transition: all 0.2s ease;\n                    font-size: 12px;\n                    display: flex;\n                    align-items: center;\n                    gap: 6px;\n                }\n\n                .mode-btn:hover {\n                    background: #404040;\n                    color: #fff;\n                }\n\n                .mode-btn.active {\n                    background: #0078d4;\n                    color: white;\n                }\n\n                .platform-selector {\n                    display: flex;\n                    gap: 4px;\n                    align-items: center;\n                }\n\n                .platform-btn {\n                    background: #3c3c3c;\n                    border: 1px solid #555;\n                    color: #fff;\n                    padding: 6px 12px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    transition: all 0.2s ease;\n                    font-size: 11px;\n                    display: flex;\n                    align-items: center;\n                    gap: 4px;\n                }\n\n                .platform-btn:hover {\n                    border-color: #0078d4;\n                    background: #404040;\n                }\n\n                .platform-btn.active {\n                    background: #0078d4;\n                    border-color: #0078d4;\n                    color: white;\n                }\n\n                .toolbar-controls {\n                    display: flex;\n                    gap: 8px;\n                    align-items: center;\n                }\n\n                .control-group {\n                    display: flex;\n                    gap: 4px;\n                    align-items: center;\n                    padding: 0 8px;\n                    border-left: 1px solid #555;\n                }\n\n                .control-group:first-child {\n                    border-left: none;\n                    padding-left: 0;\n                }\n\n                .toolbar-btn {\n                    background: #3c3c3c;\n                    border: 1px solid #555;\n                    color: #fff;\n                    padding: 6px 10px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 11px;\n                    transition: all 0.2s ease;\n                }\n\n                .toolbar-btn:hover {\n                    background: #404040;\n                    border-color: #0078d4;\n                }\n\n                .toolbar-btn.active {\n                    background: #0078d4;\n                    border-color: #0078d4;\n                }\n\n                .workspace {\n                    display: flex;\n                    flex: 1;\n                    height: calc(100vh - 60px);\n                }\n\n                .side-panel-header {\n                    padding: 12px 16px;\n                    background: #2d2d30;\n                    border-bottom: 1px solid #3c3c3c;\n                    font-size: 13px;\n                    font-weight: 600;\n                    color: #4fc3f7;\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                }\n\n                .side-panel-tabs {\n                    display: flex;\n                    background: #2d2d30;\n                    border-bottom: 1px solid #3c3c3c;\n                }\n\n                .side-panel-tab {\n                    flex: 1;\n                    padding: 8px 12px;\n                    text-align: center;\n                    cursor: pointer;\n                    font-size: 11px;\n                    background: transparent;\n                    border: none;\n                    color: #ccc;\n                    transition: all 0.2s ease;\n                }\n\n                .side-panel-tab:hover {\n                    background: #3c3c3c;\n                    color: #fff;\n                }\n\n                .side-panel-tab.active {\n                    background: #0078d4;\n                    color: white;\n                }\n\n                .side-panel-content {\n                    flex: 1;\n                    overflow-y: auto;\n                    padding: 16px;\n                }\n\n                .element-tree {\n                    font-size: 12px;\n                }\n\n                .tree-item {\n                    padding: 4px 8px;\n                    margin: 2px 0;\n                    border-radius: 3px;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    gap: 6px;\n                    transition: all 0.2s ease;\n                }\n\n                .tree-item:hover {\n                    background: rgba(79, 195, 247, 0.1);\n                }\n\n                .tree-item.selected {\n                    background: rgba(255, 152, 0, 0.2);\n                    border-left: 3px solid #ff9800;\n                }\n\n                .tree-item-icon {\n                    width: 16px;\n                    text-align: center;\n                    color: #4fc3f7;\n                }\n\n                .tree-item-name {\n                    font-weight: 500;\n                    color: #fff;\n                }\n\n                .tree-item-type {\n                    font-size: 10px;\n                    color: #888;\n                    margin-left: auto;\n                }\n\n                .tree-children {\n                    margin-left: 20px;\n                    border-left: 1px solid #404040;\n                    padding-left: 8px;\n                }\n\n                .properties-section {\n                    margin-bottom: 20px;\n                }\n\n                .properties-section h4 {\n                    margin: 0 0 10px 0;\n                    color: #81c784;\n                    font-size: 13px;\n                    font-weight: 600;\n                    border-bottom: 1px solid #404040;\n                    padding-bottom: 6px;\n                    display: flex;\n                    align-items: center;\n                    gap: 6px;\n                }\n\n                .property-row {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 10px;\n                    padding: 6px;\n                    border-radius: 3px;\n                    transition: background 0.2s ease;\n                }\n\n                .property-row:hover {\n                    background: #2d2d30;\n                }\n\n                .property-row label {\n                    font-size: 12px;\n                    color: #cccccc;\n                    font-weight: 500;\n                    width: 80px;\n                    flex-shrink: 0;\n                }\n\n                .property-row input,\n                .property-row select {\n                    background: #3c3c3c;\n                    border: 1px solid #555;\n                    color: #fff;\n                    padding: 4px 8px;\n                    border-radius: 3px;\n                    font-size: 11px;\n                    width: 120px;\n                    outline: none;\n                    transition: border-color 0.2s ease;\n                }\n\n                .property-row input:focus,\n                .property-row select:focus {\n                    border-color: #0078d4;\n                }\n\n                .preview-container {\n                    flex: 1;\n                    display: flex;\n                    flex-direction: column;\n                    background: #2d2d30;\n                    position: relative;\n                }\n\n                .preview-header {\n                    padding: 8px 16px;\n                    background: #333336;\n                    border-bottom: 1px solid #3c3c3c;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    font-size: 12px;\n                }\n\n                .zoom-controls {\n                    display: flex;\n                    gap: 4px;\n                    align-items: center;\n                }\n\n                .zoom-btn {\n                    background: #3c3c3c;\n                    border: 1px solid #555;\n                    color: #fff;\n                    width: 24px;\n                    height: 24px;\n                    border-radius: 3px;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    font-size: 10px;\n                }\n\n                .zoom-level {\n                    color: #ccc;\n                    font-size: 11px;\n                    min-width: 40px;\n                    text-align: center;\n                }\n\n                .preview-viewport {\n                    flex: 1;\n                    overflow: auto;\n                    position: relative;\n                    background:\n                        linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px),\n                        linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px);\n                    background-size: 20px 20px;\n                    transform-origin: center top;\n                    transition: transform 0.3s ease;\n                }\n\n                .device-wrapper {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    min-height: 100%;\n                    padding: 40px;\n                    transform-origin: center top;\n                    transition: transform 0.3s ease;\n                }\n\n                .device-frame {\n                    position: relative;\n                    transition: all 0.3s ease;\n                    background: #000;\n                    box-shadow: 0 10px 50px rgba(0,0,0,0.5);\n                    transform-origin: center;\n                }\n\n                .device-frame.android {\n                    width: 360px;\n                    height: 640px;\n                    border-radius: 25px;\n                    padding: 15px;\n                }\n\n                .device-frame.ios {\n                    width: 375px;\n                    height: 812px;\n                    border-radius: 40px;\n                    padding: 20px;\n                }\n\n                .device-frame.windows {\n                    width: 1024px;\n                    height: 768px;\n                    border-radius: 8px;\n                    padding: 8px;\n                    background: #f0f0f0;\n                }\n\n                .device-frame.macos {\n                    width: 1280px;\n                    height: 800px;\n                    border-radius: 12px;\n                    padding: 12px;\n                    background: #1c1c1e;\n                }\n\n                .device-screen {\n                    width: 100%;\n                    height: 100%;\n                    border-radius: inherit;\n                    overflow: hidden;\n                    position: relative;\n                    background: #fff;\n                }\n\n                .android .device-screen {\n                    border-radius: 20px;\n                    background: #fafafa;\n                }\n\n                .ios .device-screen {\n                    border-radius: 25px;\n                    background: #f2f2f7;\n                }\n\n                .windows .device-screen {\n                    border-radius: 4px;\n                    background: #ffffff;\n                    border: 1px solid #e1e1e1;\n                }\n\n                .macos .device-screen {\n                    border-radius: 8px;\n                    background: #ffffff;\n                }\n\n                .status-bar {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    padding: 0 15px;\n                    font-size: 14px;\n                    font-weight: 500;\n                }\n\n                .android .status-bar {\n                    height: 24px;\n                    background: #0078d4;\n                    color: white;\n                }\n\n                .ios .status-bar {\n                    height: 44px;\n                    background: transparent;\n                    color: #000;\n                    font-weight: 600;\n                }\n\n                .windows .status-bar {\n                    height: 32px;\n                    background: #0078d4;\n                    color: white;\n                }\n\n                .macos .status-bar {\n                    height: 28px;\n                    background: #f6f6f6;\n                    color: #000;\n                    border-bottom: 1px solid #e1e1e1;\n                }\n\n                .content-area {\n                    height: calc(100% - var(--status-bar-height));\n                    position: relative;\n                    overflow: auto;\n                }\n\n                .android .content-area { --status-bar-height: 24px; }\n                .ios .content-area { --status-bar-height: 44px; }\n                .windows .content-area { --status-bar-height: 32px; }\n                .macos .content-area { --status-bar-height: 28px; }\n\n                .grid-overlay {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    pointer-events: none;\n                    opacity: 0.3;\n                    z-index: 1000;\n                    background-image:\n                        linear-gradient(rgba(0,100,255,0.3) 1px, transparent 1px),\n                        linear-gradient(90deg, rgba(0,100,255,0.3) 1px, transparent 1px);\n                    background-size: 16px 16px;\n                    display: none;\n                }\n\n                .grid-overlay.visible {\n                    display: block;\n                }\n\n                .alignment-guides {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    pointer-events: none;\n                    z-index: 1001;\n                }\n\n                .guide-line {\n                    position: absolute;\n                    background: #ff6b00;\n                    opacity: 0;\n                    transition: opacity 0.2s ease;\n                }\n\n                .guide-line.vertical {\n                    width: 2px;\n                    height: 100%;\n                }\n\n                .guide-line.horizontal {\n                    width: 100%;\n                    height: 2px;\n                }\n\n                .guide-line.active {\n                    opacity: 0.8;\n                }\n\n                .xaml-element {\n                    position: relative;\n                    border: 2px solid transparent;\n                    transition: all 0.2s ease;\n                    min-width: 20px;\n                    min-height: 20px;\n                    cursor: default;\n                }\n\n                .mode-select .xaml-element {\n                    cursor: pointer;\n                }\n\n                .mode-move .xaml-element {\n                    cursor: move;\n                }\n\n                .xaml-element:hover {\n                    border-color: #4fc3f7;\n                    box-shadow: 0 0 8px rgba(79, 195, 247, 0.3);\n                }\n\n                .xaml-element.selected {\n                    border-color: #ff9800;\n                    box-shadow: 0 0 12px rgba(255, 152, 0, 0.4);\n                }\n\n                .xaml-element.dragging {\n                    z-index: 1002;\n                    box-shadow: 0 8px 25px rgba(0,0,0,0.3);\n                }\n\n                .element-handles {\n                    position: absolute;\n                    top: -8px;\n                    left: -8px;\n                    right: -8px;\n                    bottom: -8px;\n                    opacity: 0;\n                    transition: opacity 0.2s ease;\n                    pointer-events: none;\n                }\n\n                .xaml-element.selected .element-handles {\n                    opacity: 1;\n                    pointer-events: all;\n                }\n\n                .resize-handle {\n                    position: absolute;\n                    width: 8px;\n                    height: 8px;\n                    background: #ff9800;\n                    border: 1px solid #fff;\n                    border-radius: 2px;\n                    cursor: pointer;\n                }\n\n                .resize-handle.nw { top: 0; left: 0; cursor: nw-resize; }\n                .resize-handle.n { top: 0; left: 50%; transform: translateX(-50%); cursor: n-resize; }\n                .resize-handle.ne { top: 0; right: 0; cursor: ne-resize; }\n                .resize-handle.e { top: 50%; right: 0; transform: translateY(-50%); cursor: e-resize; }\n                .resize-handle.se { bottom: 0; right: 0; cursor: se-resize; }\n                .resize-handle.s { bottom: 0; left: 50%; transform: translateX(-50%); cursor: s-resize; }\n                .resize-handle.sw { bottom: 0; left: 0; cursor: sw-resize; }\n                .resize-handle.w { top: 50%; left: 0; transform: translateY(-50%); cursor: w-resize; }\n\n                .rotation-handle {\n                    position: absolute;\n                    top: -20px;\n                    left: 50%;\n                    transform: translateX(-50%);\n                    width: 12px;\n                    height: 12px;\n                    background: #4caf50;\n                    border: 1px solid #fff;\n                    border-radius: 50%;\n                    cursor: grab;\n                }\n\n                .rotation-handle:active {\n                    cursor: grabbing;\n                }\n\n                .element-info {\n                    position: absolute;\n                    top: -32px;\n                    left: 0;\n                    background: rgba(0,0,0,0.8);\n                    color: white;\n                    padding: 4px 8px;\n                    border-radius: 3px;\n                    font-size: 10px;\n                    white-space: nowrap;\n                    opacity: 0;\n                    transition: opacity 0.2s ease;\n                    z-index: 1003;\n                }\n\n                .xaml-element:hover .element-info,\n                .xaml-element.selected .element-info {\n                    opacity: 1;\n                }\n\n                /* MAUI Element Styles with proper rendering */\n                .maui-button {\n                    display: inline-flex;\n                    align-items: center;\n                    justify-content: center;\n                    padding: 12px 24px;\n                    border: none;\n                    border-radius: 6px;\n                    font-size: 16px;\n                    font-weight: 500;\n                    cursor: pointer;\n                    text-align: center;\n                    transition: all 0.2s ease;\n                    background: #0078d4;\n                    color: white;\n                    margin: 4px;\n                    min-height: 40px;\n                }\n\n                .android .maui-button {\n                    border-radius: 4px;\n                    text-transform: uppercase;\n                    font-weight: 600;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n                }\n\n                .ios .maui-button {\n                    border-radius: 10px;\n                    font-weight: 600;\n                }\n\n                .windows .maui-button {\n                    border-radius: 2px;\n                    border: 1px solid #0078d4;\n                }\n\n                .macos .maui-button {\n                    border-radius: 6px;\n                    background: #007aff;\n                }\n\n                .maui-label {\n                    padding: 8px;\n                    color: #333;\n                    font-size: 16px;\n                    line-height: 1.4;\n                    margin: 2px;\n                    background: transparent;\n                    word-wrap: break-word;\n                }\n\n                .android .maui-label {\n                    font-family: 'Roboto', sans-serif;\n                }\n\n                .ios .maui-label {\n                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n                }\n\n                .windows .maui-label {\n                    font-family: 'Segoe UI', sans-serif;\n                }\n\n                .macos .maui-label {\n                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n                }\n\n                .maui-entry {\n                    border: 1px solid #ccc;\n                    padding: 12px 16px;\n                    border-radius: 6px;\n                    font-size: 16px;\n                    background: white;\n                    margin: 4px;\n                    width: 250px;\n                    outline: none;\n                    min-height: 40px;\n                }\n\n                .android .maui-entry {\n                    border-bottom: 2px solid #0078d4;\n                    border-radius: 4px 4px 0 0;\n                    background: transparent;\n                }\n\n                .ios .maui-entry {\n                    border-radius: 10px;\n                    background: #f2f2f7;\n                    border: 1px solid #e5e5ea;\n                }\n\n                .windows .maui-entry {\n                    border-radius: 2px;\n                    border: 2px solid #0078d4;\n                }\n\n                .maui-stacklayout {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 8px;\n                    padding: 8px;\n                    background: transparent;\n                    min-height: 50px;\n                }\n\n                .maui-stacklayout.horizontal {\n                    flex-direction: row;\n                    align-items: center;\n                }\n\n                .maui-grid {\n                    display: grid;\n                    gap: 8px;\n                    padding: 8px;\n                    background: transparent;\n                    min-height: 100px;\n                    border: 1px dashed #ccc;\n                }\n\n                .maui-frame {\n                    padding: 16px;\n                    background: white;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n                    margin: 8px;\n                    border: 1px solid #e0e0e0;\n                }\n\n                .maui-image {\n                    max-width: 200px;\n                    height: auto;\n                    border-radius: 6px;\n                    margin: 4px;\n                    background: #f5f5f5;\n                    min-height: 100px;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    color: #888;\n                    font-size: 12px;\n                }\n\n                .no-selection {\n                    text-align: center;\n                    color: #888;\n                    margin-top: 60px;\n                    font-style: italic;\n                }\n\n                .collapse-btn {\n                    background: transparent;\n                    border: none;\n                    color: #ccc;\n                    cursor: pointer;\n                    padding: 4px;\n                    border-radius: 2px;\n                }\n\n                .collapse-btn:hover {\n                    background: #404040;\n                    color: #fff;\n                }\n\n                .status-info {\n                    color: #888;\n                    font-size: 11px;\n                }\n\n                .resize-corner {\n                    position: absolute;\n                    bottom: 0;\n                    right: 0;\n                    width: 12px;\n                    height: 12px;\n                    background: #555;\n                    cursor: se-resize;\n                    opacity: 0.7;\n                }\n\n                .resize-corner:hover {\n                    background: #0078d4;\n                    opacity: 1;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"app-container\">\n                <div class=\"main-toolbar\">\n                    <div class=\"toolbar-left\">\n                        <div class=\"mode-selector\">\n                            <button class=\"mode-btn active\" id=\"selectMode\">Select</button>\n                            <button class=\"mode-btn\" id=\"moveMode\">Move</button>\n                        </div>\n\n                        <div class=\"platform-selector\">\n                            <button class=\"platform-btn active\" data-platform=\"android\">Android</button>\n                            <button class=\"platform-btn\" data-platform=\"ios\">iOS</button>\n                            <button class=\"platform-btn\" data-platform=\"windows\">Windows</button>\n                            <button class=\"platform-btn\" data-platform=\"macos\">macOS</button>\n                        </div>\n                    </div>\n\n                    <div class=\"toolbar-right\">\n                        <div class=\"zoom-controls\">\n                            <button class=\"zoom-btn\" id=\"zoomOut\" title=\"Zoom Out\">−</button>\n                            <span class=\"zoom-level\" id=\"zoomLevel\">100%</span>\n                            <button class=\"zoom-btn\" id=\"zoomIn\" title=\"Zoom In\">+</button>\n                            <button class=\"zoom-btn\" id=\"zoomFit\" title=\"Fit to Window\">Fit</button>\n                            <button class=\"zoom-btn\" id=\"zoomActual\" title=\"Actual Size\">1:1</button>\n                        </div>\n                        \n                        <div class=\"control-group\">\n                            <button class=\"toolbar-btn\" id=\"gridToggle\">Grid</button>\n                            <select class=\"toolbar-btn\" id=\"gridSize\" style=\"padding: 4px 6px;\">\n                                <option value=\"8\">8px</option>\n                                <option value=\"16\" selected>16px</option>\n                                <option value=\"24\">24px</option>\n                            </select>\n                        </div>\n\n                        <div class=\"control-group\">\n                            <button class=\"toolbar-btn\" id=\"snapToggle\">Snap</button>\n                        </div>\n\n                        <div class=\"control-group\">\n                            <button class=\"toolbar-btn\" id=\"panelToggle\">Sidebar</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"workspace\">\n                    <!-- Properties panel moved to VS Code sidebar -->\n\n                    <div class=\"preview-container\">\n                        <div class=\"preview-header\">\n                            <div class=\"status-info\">\n                                <span id=\"currentMode\">Select Mode</span> |\n                                <span id=\"currentPlatform\">Android</span> |\n                                <span id=\"elementCount\">0 elements</span>\n                            </div>\n\n                            <div class=\"zoom-controls\">\n                                <button class=\"zoom-btn\" id=\"zoomOut\">-</button>\n                                <span class=\"zoom-level\" id=\"zoomLevel\">100%</span>\n                                <button class=\"zoom-btn\" id=\"zoomIn\">+</button>\n                                <button class=\"zoom-btn\" id=\"zoomFit\">Fit</button>\n                            </div>\n                        </div>\n\n                        <div class=\"preview-viewport\" id=\"previewViewport\">\n                            <div class=\"device-wrapper\">\n                                <div class=\"device-frame android\" id=\"deviceFrame\">\n                                    <div class=\"device-screen\">\n                                        <div class=\"status-bar\">\n                                            <span>9:41</span>\n                                            <span>MAUI Preview</span>\n                                            <span><i class=\"fas fa-battery-three-quarters\"></i> 85%</span>\n                                        </div>\n                                        <div class=\"content-area\">\n                                            <div class=\"grid-overlay\" id=\"gridOverlay\"></div>\n                                            <div class=\"alignment-guides\" id=\"alignmentGuides\">\n                                                <div class=\"guide-line vertical\" id=\"vGuide\"></div>\n                                                <div class=\"guide-line horizontal\" id=\"hGuide\"></div>\n                                            </div>\n                                            <div id=\"xamlContent\">\n                                                ${mobilePreview}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <script>\n                const vscode = acquireVsCodeApi();\n                let selectedElement = null;\n                let currentPlatform = 'android';\n                let currentMode = 'select';\n                let snapEnabled = false;\n                let gridVisible = false;\n                let gridSize = 16;\n                let isDragging = false;\n                let isResizing = false;\n                let isRotating = false;\n                let dragOffset = { x: 0, y: 0 };\n                let zoomLevel = 1;\n                let currentZoom = 100; // Zoom percentage\n                const zoomSteps = [25, 50, 75, 100, 125, 150, 200, 300, 400];\n\n                // Initialize app\n                document.addEventListener('DOMContentLoaded', function() {\n                    initializeEventListeners();\n                    updateElementCount();\n                    updateStatusBar();\n                    // Ask extension to provide sidebar properties data\n                    vscode.postMessage({ type: 'requestPropertiesData' });\n                });\n\n                function initializeEventListeners() {\n                    // Mode switching\n                    const selectModeBtn = document.getElementById('selectMode');\n                    if (selectModeBtn) selectModeBtn.addEventListener('click', () => setMode('select'));\n                    const moveModeBtn = document.getElementById('moveMode');\n                    if (moveModeBtn) moveModeBtn.addEventListener('click', () => setMode('move'));\n\n                    // Platform switching\n                    document.querySelectorAll('.platform-btn').forEach(btn => {\n                        btn.addEventListener('click', () => {\n                            document.querySelectorAll('.platform-btn').forEach(b => b.classList.remove('active'));\n                            btn.classList.add('active');\n                            currentPlatform = btn.dataset.platform;\n                            updatePlatform();\n                        });\n                    });\n\n                    // Controls\n                    const gridToggleBtn = document.getElementById('gridToggle');\n                    if (gridToggleBtn) gridToggleBtn.addEventListener('click', toggleGrid);\n                    const snapToggleBtn = document.getElementById('snapToggle');\n                    if (snapToggleBtn) snapToggleBtn.addEventListener('click', toggleSnap);\n\n                    // Grid size\n                    const gridSizeSelect = document.getElementById('gridSize');\n                    if (gridSizeSelect) gridSizeSelect.addEventListener('change', (e) => {\n                        gridSize = parseInt(e.target.value);\n                        updateGridSize();\n                    });\n\n                    // Tabs\n                    // Tabs no longer present (side panel removed)\n\n                    // Zoom controls\n                    const zoomInBtn = document.getElementById('zoomIn');\n                    if (zoomInBtn) zoomInBtn.addEventListener('click', zoomIn);\n                    const zoomOutBtn = document.getElementById('zoomOut');\n                    if (zoomOutBtn) zoomOutBtn.addEventListener('click', zoomOut);\n                    const zoomFitBtn = document.getElementById('zoomFit');\n                    if (zoomFitBtn) zoomFitBtn.addEventListener('click', fitToViewport);\n                    const zoomActualBtn = document.getElementById('zoomActual');\n                    if (zoomActualBtn) zoomActualBtn.addEventListener('click', zoomActualSize);\n\n                    // Element interactions\n                    initializeElementInteractions();\n\n                    // Global mouse events\n                    document.addEventListener('mousemove', handleGlobalMouseMove);\n                    document.addEventListener('mouseup', handleGlobalMouseUp);\n                    document.addEventListener('click', handleGlobalClick);\n                }\n\n                function setMode(mode) {\n                    currentMode = mode;\n                    document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));\n                    document.getElementById(mode + 'Mode').classList.add('active');\n\n                    const contentArea = document.querySelector('.content-area');\n                    contentArea.className = contentArea.className.replace(/mode-\\\\w+/g, '');\n                    contentArea.classList.add('mode-' + mode);\n\n                    updateStatusBar();\n                }\n\n                function updatePlatform() {\n                    const deviceFrame = document.getElementById('deviceFrame');\n                    deviceFrame.className = \\`device-frame \\${currentPlatform}\\`;\n                    updateStatusBarForPlatform(currentPlatform);\n                    updateStatusBar();\n\n                    vscode.postMessage({\n                        type: 'platformChanged',\n                        platform: currentPlatform\n                    });\n                }\n\n                function updateStatusBarForPlatform(platform) {\n                    const statusBar = document.querySelector('.status-bar');\n                    const spans = statusBar.querySelectorAll('span');\n\n                    switch(platform) {\n                        case 'android':\n                            spans[0].textContent = '9:41';\n                            spans[1].textContent = 'MAUI Preview';\n                            spans[2].innerHTML = '<i class=\"fas fa-battery-three-quarters\"></i> 85%';\n                            break;\n                        case 'ios':\n                            spans[0].textContent = '9:41';\n                            spans[1].textContent = '';\n                            spans[2].innerHTML = '<i class=\"fas fa-battery-full\"></i>';\n                            break;\n                        case 'windows':\n                            spans[0].textContent = 'MAUI App';\n                            spans[1].textContent = '';\n                            spans[2].innerHTML = '<i class=\"fas fa-times\"></i><i class=\"fas fa-window-maximize\"></i><i class=\"fas fa-minus\"></i>';\n                            break;\n                        case 'macos':\n                            spans[0].innerHTML = '<i class=\"fas fa-circle\" style=\"color: #ff5f57;\"></i><i class=\"fas fa-circle\" style=\"color: #ffbd2e;\"></i><i class=\"fas fa-circle\" style=\"color: #28ca42;\"></i>';\n                            spans[1].textContent = 'MAUI App';\n                            spans[2].textContent = '';\n                            break;\n                    }\n                }\n\n                function toggleGrid() {\n                    gridVisible = !gridVisible;\n                    const gridOverlay = document.getElementById('gridOverlay');\n                    const gridBtn = document.getElementById('gridToggle');\n\n                    if (gridVisible) {\n                        gridOverlay.classList.add('visible');\n                        gridBtn.classList.add('active');\n                    } else {\n                        gridOverlay.classList.remove('visible');\n                        gridBtn.classList.remove('active');\n                    }\n                }\n\n                function toggleSnap() {\n                    snapEnabled = !snapEnabled;\n                    const snapBtn = document.getElementById('snapToggle');\n\n                    if (snapEnabled) {\n                        snapBtn.classList.add('active');\n                    } else {\n                        snapBtn.classList.remove('active');\n                    }\n                }\n\n                function togglePanel() {\n                    const sidePanel = document.getElementById('sidePanel');\n                    const panelBtn = document.getElementById('panelToggle');\n\n                    sidePanel.classList.toggle('collapsed');\n                    panelBtn.classList.toggle('active');\n                }\n\n                function updateGridSize() {\n                    const gridOverlay = document.getElementById('gridOverlay');\n                    gridOverlay.style.backgroundSize = \\`\\${gridSize}px \\${gridSize}px\\`;\n                }\n\n                function switchTab(tab) {\n                    document.querySelectorAll('.side-panel-tab').forEach(t => t.classList.remove('active'));\n                    document.getElementById(tab + 'Tab').classList.add('active');\n\n                    document.getElementById('structureContent').style.display = tab === 'structure' ? 'block' : 'none';\n                    document.getElementById('propertiesContent').style.display = tab === 'properties' ? 'block' : 'none';\n                }\n\n                function updateZoomDisplay() {\n                    document.getElementById('zoomLevel').textContent = currentZoom + '%';\n                }\n\n                function setZoom(newZoom) {\n                    currentZoom = Math.max(25, Math.min(400, newZoom));\n                    zoomLevel = currentZoom / 100;\n                    const deviceWrapper = document.querySelector('.device-wrapper');\n                    deviceWrapper.style.transform = \\`scale(\\${zoomLevel})\\`;\n                    updateZoomDisplay();\n                }\n\n                function zoomIn() {\n                    const currentIndex = zoomSteps.indexOf(currentZoom);\n                    if (currentIndex < zoomSteps.length - 1) {\n                        setZoom(zoomSteps[currentIndex + 1]);\n                    }\n                }\n\n                function zoomOut() {\n                    const currentIndex = zoomSteps.indexOf(currentZoom);\n                    if (currentIndex > 0) {\n                        setZoom(zoomSteps[currentIndex - 1]);\n                    }\n                }\n\n                function zoomActualSize() {\n                    setZoom(100);\n                }\n\n                function fitToViewport() {\n                    const viewport = document.querySelector('.preview-viewport');\n                    const deviceWrapper = document.querySelector('.device-wrapper');\n                    const deviceFrame = document.getElementById('deviceFrame');\n                    \n                    // Reset transform to get original size\n                    deviceWrapper.style.transform = 'scale(1)';\n                    \n                    const deviceRect = deviceFrame.getBoundingClientRect();\n                    const viewportRect = viewport.getBoundingClientRect();\n                    \n                    const scaleX = (viewportRect.width - 80) / deviceRect.width;\n                    const scaleY = (viewportRect.height - 80) / deviceRect.height;\n                    const scale = Math.min(scaleX, scaleY, 1); // Don't scale larger than 100%\n                    \n                    const zoomPercent = Math.round(scale * 100);\n                    setZoom(zoomPercent);\n\n                    const scaleX = (viewportRect.width - 100) / deviceRect.width;\n                    const scaleY = (viewportRect.height - 100) / deviceRect.height;\n                    const scale = Math.min(scaleX, scaleY, 1);\n\n                    setZoom(scale);\n                }\n\n                function updateStatusBar() {\n                    document.getElementById('currentMode').textContent = currentMode === 'select' ? 'Select Mode' : 'Move Mode';\n                    document.getElementById('currentPlatform').textContent = currentPlatform.charAt(0).toUpperCase() + currentPlatform.slice(1);\n                }\n\n                function updateElementCount() {\n                    const elements = document.querySelectorAll('.xaml-element');\n                    document.getElementById('elementCount').textContent = \\`\\${elements.length} elements\\`;\n                }\n\n                function snapToGrid(value) {\n                    if (!snapEnabled) return value;\n                    return Math.round(value / gridSize) * gridSize;\n                }\n\n                function showAlignmentGuide(type, position) {\n                    const guide = document.getElementById(type === 'vertical' ? 'vGuide' : 'hGuide');\n                    if (type === 'vertical') {\n                        guide.style.left = position + 'px';\n                    } else {\n                        guide.style.top = position + 'px';\n                    }\n                    guide.classList.add('active');\n                }\n\n                function hideAlignmentGuides() {\n                    document.querySelectorAll('.guide-line').forEach(guide => {\n                        guide.classList.remove('active');\n                    });\n                }\n\n                function selectElement(element) {\n                    if (selectedElement) {\n                        selectedElement.classList.remove('selected');\n                        removeElementHandles(selectedElement);\n\n                        // Remove tree selection\n                        document.querySelectorAll('.tree-item').forEach(item => {\n                            item.classList.remove('selected');\n                        });\n                    }\n\n                    selectedElement = element;\n                    element.classList.add('selected');\n                    addElementHandles(element);\n\n                    // Highlight in tree\n                    const elementType = element.dataset.type || 'unknown';\n                    const treeItems = document.querySelectorAll('.tree-item');\n                    treeItems.forEach(item => {\n                        if (item.dataset.elementId === element.id) {\n                            item.classList.add('selected');\n                        }\n                    });\n\n                    // Extract detailed properties from element\n                    const computedStyle = getComputedStyle(element);\n                    const properties = {\n                        // Layout properties\n                        Width: element.offsetWidth + 'px',\n                        Height: element.offsetHeight + 'px',\n                        X: element.offsetLeft + 'px',\n                        Y: element.offsetTop + 'px',\n                        Margin: computedStyle.margin,\n                        Padding: computedStyle.padding,\n                        \n                        // Appearance properties\n                        BackgroundColor: computedStyle.backgroundColor,\n                        TextColor: computedStyle.color,\n                        Opacity: computedStyle.opacity,\n                        FontSize: computedStyle.fontSize,\n                        FontWeight: computedStyle.fontWeight,\n                        FontStyle: computedStyle.fontStyle,\n                        \n                        // Border properties\n                        BorderColor: computedStyle.borderColor,\n                        BorderWidth: computedStyle.borderWidth,\n                        CornerRadius: computedStyle.borderRadius,\n                        \n                        // Content\n                        Text: element.textContent || element.value || '',\n                        \n                        // Additional metadata\n                        ElementType: elementType,\n                        ClassName: element.className,\n                        IsVisible: computedStyle.display !== 'none' ? 'True' : 'False'\n                    };\n\n                    // Extract data attributes (which might contain XAML properties)\n                    Object.keys(element.dataset).forEach(key => {\n                        if (key !== 'type' && key !== 'elementId') {\n                            properties[key] = element.dataset[key];\n                        }\n                    });\n\n                    console.log('[Selection] Element selected:', elementType, properties);\n\n                    vscode.postMessage({\n                        type: 'elementSelected',\n                        elementId: element.id,\n                        elementType: elementType,\n                        properties: properties\n                    });\n                }\n\n                function addElementHandles(element) {\n                    const handles = document.createElement('div');\n                    handles.className = 'element-handles';\n                    handles.innerHTML = \\`\n                        <div class=\"resize-handle nw\" data-direction=\"nw\"></div>\n                        <div class=\"resize-handle n\" data-direction=\"n\"></div>\n                        <div class=\"resize-handle ne\" data-direction=\"ne\"></div>\n                        <div class=\"resize-handle e\" data-direction=\"e\"></div>\n                        <div class=\"resize-handle se\" data-direction=\"se\"></div>\n                        <div class=\"resize-handle s\" data-direction=\"s\"></div>\n                        <div class=\"resize-handle sw\" data-direction=\"sw\"></div>\n                        <div class=\"resize-handle w\" data-direction=\"w\"></div>\n                        <div class=\"rotation-handle\" data-action=\"rotate\"></div>\n                    \\`;\n\n                    handles.querySelectorAll('.resize-handle').forEach(handle => {\n                        handle.addEventListener('mousedown', startResize);\n                    });\n\n                    handles.querySelector('.rotation-handle').addEventListener('mousedown', startRotate);\n\n                    element.appendChild(handles);\n                }\n\n                function removeElementHandles(element) {\n                    const handles = element.querySelector('.element-handles');\n                    if (handles) {\n                        handles.remove();\n                    }\n                }\n\n                // showElementProperties removed — external sidebar now owns properties UI\n\n                function getElementSpecificProperties(elementType) {\n                    switch(elementType) {\n                        case 'Label':\n                            return \\`\n                                <div class=\"properties-section\">\n                                    <h4><i class=\"fas fa-font\"></i> Text</h4>\n                                    <div class=\"property-row\">\n                                        <label>Text:</label>\n                                        <input type=\"text\" placeholder=\"Label Text\" onchange=\"updateProperty('Text', this.value)\">\n                                    </div>\n                                    <div class=\"property-row\">\n                                        <label>Font Size:</label>\n                                        <input type=\"number\" value=\"16\" onchange=\"updateProperty('FontSize', this.value + 'px')\">\n                                    </div>\n                                    <div class=\"property-row\">\n                                        <label>Color:</label>\n                                        <input type=\"color\" onchange=\"updateProperty('Color', this.value)\">\n                                    </div>\n                                </div>\n                            \\`;\n                        case 'Button':\n                            return \\`\n                                <div class=\"properties-section\">\n                                    <h4><i class=\"fas fa-hand-pointer\"></i> Button</h4>\n                                    <div class=\"property-row\">\n                                        <label>Text:</label>\n                                        <input type=\"text\" placeholder=\"Button\" onchange=\"updateProperty('Text', this.value)\">\n                                    </div>\n                                    <div class=\"property-row\">\n                                        <label>Command:</label>\n                                        <input type=\"text\" placeholder=\"Command\" onchange=\"updateProperty('Command', this.value)\">\n                                    </div>\n                                </div>\n                            \\`;\n                        case 'Entry':\n                            return \\`\n                                <div class=\"properties-section\">\n                                    <h4><i class=\"fas fa-keyboard\"></i> Input</h4>\n                                    <div class=\"property-row\">\n                                        <label>Placeholder:</label>\n                                        <input type=\"text\" placeholder=\"Enter text...\" onchange=\"updateProperty('Placeholder', this.value)\">\n                                    </div>\n                                </div>\n                            \\`;\n                        default:\n                            return '';\n                    }\n                }\n\n                function updateProperty(property, value) {\n                    if (!selectedElement) return;\n\n                    // Apply visual changes immediately\n                    switch(property) {\n                        case 'Width':\n                            selectedElement.style.width = value;\n                            break;\n                        case 'Height':\n                            selectedElement.style.height = value;\n                            break;\n                        case 'Left':\n                            selectedElement.style.left = value;\n                            break;\n                        case 'Top':\n                            selectedElement.style.top = value;\n                            break;\n                        case 'BackgroundColor':\n                            selectedElement.style.backgroundColor = value;\n                            break;\n                        case 'Opacity':\n                            selectedElement.style.opacity = value;\n                            break;\n                        case 'Rotation':\n                            selectedElement.style.transform = \\`rotate(\\${value})\\`;\n                            break;\n                        case 'Text':\n                            selectedElement.textContent = value;\n                            break;\n                        case 'FontSize':\n                            selectedElement.style.fontSize = value;\n                            break;\n                        case 'Color':\n                            selectedElement.style.color = value;\n                            break;\n                    }\n\n                    vscode.postMessage({\n                        type: 'propertyChanged',\n                        elementId: selectedElement.id,\n                        property: property,\n                        value: value\n                    });\n                }\n\n                function initializeElementInteractions() {\n                    const elements = document.querySelectorAll('.xaml-element');\n                    elements.forEach(element => {\n                        // Add element info tooltip\n                        const info = document.createElement('div');\n                        info.className = 'element-info';\n                        info.textContent = element.dataset.type || 'Element';\n                        element.appendChild(info);\n\n                        element.addEventListener('click', function(e) {\n                            e.stopPropagation();\n                            if (currentMode === 'select') {\n                                selectElement(this);\n                            }\n                        });\n\n                        element.addEventListener('mousedown', function(e) {\n                            if (e.target.classList.contains('resize-handle') ||\n                                e.target.classList.contains('rotation-handle')) return;\n\n                            if (currentMode === 'move') {\n                                isDragging = true;\n                                this.classList.add('dragging');\n                                const rect = this.getBoundingClientRect();\n                                const container = document.querySelector('.content-area').getBoundingClientRect();\n                                dragOffset.x = e.clientX - rect.left;\n                                dragOffset.y = e.clientY - rect.top;\n\n                                selectElement(this);\n                                e.preventDefault();\n                            }\n                        });\n                    });\n\n                    // Allow root container to be target for resize/move via handles if needed\n                    const root = document.getElementById('xamlContent');\n                    if (root && !root.classList.contains('xaml-element')) {\n                        root.classList.add('xaml-element');\n                        // Assign a stable-ish ID if missing\n                        if (!root.id) {\n                            root.id = 'element_' + Math.random().toString(36).substr(2, 9);\n                        }\n                    }\n                }\n\n                function startResize(e) {\n                    e.stopPropagation();\n                    isResizing = true;\n                    const direction = e.target.dataset.direction;\n                    const element = selectedElement;\n                    const rect = element.getBoundingClientRect();\n                    const startX = e.clientX;\n                    const startY = e.clientY;\n\n                    function doResize(e) {\n                        if (!isResizing) return;\n\n                        const deltaX = e.clientX - startX;\n                        const deltaY = e.clientY - startY;\n\n                        let newWidth = rect.width;\n                        let newHeight = rect.height;\n\n                        if (direction.includes('e')) newWidth += deltaX;\n                        if (direction.includes('w')) newWidth -= deltaX;\n                        if (direction.includes('s')) newHeight += deltaY;\n                        if (direction.includes('n')) newHeight -= deltaY;\n\n                        newWidth = Math.max(20, snapToGrid(newWidth));\n                        newHeight = Math.max(20, snapToGrid(newHeight));\n\n                        element.style.width = newWidth + 'px';\n                        element.style.height = newHeight + 'px';\n                    }\n\n                    function stopResize() {\n                        isResizing = false;\n                        document.removeEventListener('mousemove', doResize);\n                        document.removeEventListener('mouseup', stopResize);\n                        hideAlignmentGuides();\n\n                        if (selectedElement) {\n                            vscode.postMessage({\n                                type: 'elementResized',\n                                elementId: selectedElement.id,\n                                size: {\n                                    width: selectedElement.offsetWidth,\n                                    height: selectedElement.offsetHeight\n                                }\n                            });\n                        }\n                    }\n\n                    document.addEventListener('mousemove', doResize);\n                    document.addEventListener('mouseup', stopResize);\n                }\n\n                function startRotate(e) {\n                    e.stopPropagation();\n                    isRotating = true;\n                    const element = selectedElement;\n                    const rect = element.getBoundingClientRect();\n                    const centerX = rect.left + rect.width / 2;\n                    const centerY = rect.top + rect.height / 2;\n\n                    function doRotate(e) {\n                        if (!isRotating) return;\n\n                        const deltaX = e.clientX - centerX;\n                        const deltaY = e.clientY - centerY;\n                        const angle = Math.atan2(deltaY, deltaX) * (180 / Math.PI) + 90;\n\n                        element.style.transform = \\`rotate(\\${angle}deg)\\`;\n                    }\n\n                    function stopRotate() {\n                        isRotating = false;\n                        document.removeEventListener('mousemove', doRotate);\n                        document.removeEventListener('mouseup', stopRotate);\n\n                        if (selectedElement) {\n                            const transform = selectedElement.style.transform;\n                            const rotateMatch = transform.match(/rotate\\\\(([^)]+)\\\\)/);\n                            const rotation = rotateMatch ? rotateMatch[1] : '0deg';\n\n                            vscode.postMessage({\n                                type: 'elementRotated',\n                                elementId: selectedElement.id,\n                                rotation: rotation\n                            });\n                        }\n                    }\n\n                    document.addEventListener('mousemove', doRotate);\n                    document.addEventListener('mouseup', stopRotate);\n                }\n\n                function handleGlobalMouseMove(e) {\n                    if (!isDragging || !selectedElement || currentMode !== 'move') return;\n\n                    const container = document.querySelector('.content-area');\n                    const containerRect = container.getBoundingClientRect();\n\n                    let newX = e.clientX - containerRect.left - dragOffset.x;\n                    let newY = e.clientY - containerRect.top - dragOffset.y;\n\n                    newX = snapToGrid(Math.max(0, newX));\n                    newY = snapToGrid(Math.max(0, newY));\n\n                    selectedElement.style.position = 'absolute';\n                    selectedElement.style.left = newX + 'px';\n                    selectedElement.style.top = newY + 'px';\n\n                    // Show alignment guides\n                    if (snapEnabled) {\n                        showAlignmentGuide('vertical', newX + selectedElement.offsetWidth / 2);\n                        showAlignmentGuide('horizontal', newY + selectedElement.offsetHeight / 2);\n                    }\n                }\n\n                function handleGlobalMouseUp() {\n                    if (isDragging && selectedElement) {\n                        isDragging = false;\n                        selectedElement.classList.remove('dragging');\n                        hideAlignmentGuides();\n\n                        vscode.postMessage({\n                            type: 'elementMoved',\n                            elementId: selectedElement.id,\n                            position: {\n                                x: selectedElement.offsetLeft,\n                                y: selectedElement.offsetTop\n                            }\n                        });\n                    }\n                }\n\n                function handleGlobalClick(e) {\n                    if (!e.target.closest('.xaml-element') &&\n                        !e.target.closest('.element-handles')) {\n                        if (selectedElement) {\n                            selectedElement.classList.remove('selected');\n                            removeElementHandles(selectedElement);\n                            selectedElement = null;\n\n                            // Clear tree selection\n                            document.querySelectorAll('.tree-item').forEach(item => {\n                                item.classList.remove('selected');\n                            });\n                        }\n                    }\n                }\n\n                // Receive messages from the extension\n                window.addEventListener('message', event => {\n                    const msg = event.data;\n                    if (!msg || !msg.type) return;\n\n                    switch (msg.type) {\n                        case 'updateProperty':\n                            // msg.property and msg.value\n                            const prop = msg.property;\n                            const val = msg.value;\n                            if (selectedElement) {\n                                // Apply common properties\n                                if (prop.toLowerCase().includes('width')) selectedElement.style.width = val;\n                                if (prop.toLowerCase().includes('height')) selectedElement.style.height = val;\n                                if (prop.toLowerCase().includes('background') || prop.toLowerCase().includes('backgroundcolor')) selectedElement.style.background = val;\n                                if (prop.toLowerCase().includes('opacity')) selectedElement.style.opacity = val;\n                            }\n                            break;\n                    }\n                });\n\n                // Initialize with default platform\n                updateStatusBarForPlatform('android');\n            </script>\n        </body>\n        </html>`;\n    }\n\n    private _parseXaml(xamlContent: string): any {\n        try {\n            console.log('[XAML Parser] Starting XAML parsing...');\n            console.log('[XAML Parser] Content length:', xamlContent.length);\n            \n            const parser = new XMLParser({\n                ignoreAttributes: false,\n                attributeNamePrefix: '@_',\n                parseTagValue: false,\n                parseAttributeValue: false,\n                trimValues: true\n            });\n            \n            const result = parser.parse(xamlContent);\n            console.log('[XAML Parser] Parsing successful');\n            console.log('[XAML Parser] Parsed structure:', JSON.stringify(result, null, 2));\n            \n            return result;\n        } catch (error) {\n            console.error('[XAML Parser] Error parsing XAML:', error);\n            console.error('[XAML Parser] Content:', xamlContent.substring(0, 500) + '...');\n            \n            // Show error to user\n            vscode.window.showErrorMessage(`XAML parsing error: ${error instanceof Error ? error.message : String(error)}`);\n            return null;\n        }\n    }\n\n    private _generateMobilePreview(parsedXaml: any): string {\n        console.log('[Preview] Generating mobile preview...');\n        \n        if (!parsedXaml) {\n            console.log('[Preview] No parsed XAML data available');\n            return `<div style=\"padding: 20px; text-align: center; color: #666; background: #f8f8f8; border-radius: 8px; margin: 20px;\">\n                <i class=\"fas fa-exclamation-triangle\" style=\"font-size: 24px; margin-bottom: 12px; color: #ff6b6b;\"></i>\n                <p style=\"font-size: 16px; margin-bottom: 8px; color: #333;\">Error parsing XAML</p>\n                <p style=\"font-size: 12px; color: #666;\">Please check XAML syntax and try again</p>\n                <p style=\"font-size: 10px; color: #999; margin-top: 12px;\">Check VS Code Developer Console (Help → Toggle Developer Tools) for detailed error information</p>\n                <details style=\"margin-top: 12px; text-align: left;\">\n                    <summary style=\"cursor: pointer; color: #0078d4;\">Troubleshooting Tips</summary>\n                    <ul style=\"font-size: 11px; color: #666; margin-top: 8px;\">\n                        <li>Ensure all XML tags are properly closed</li>\n                        <li>Check for missing namespace declarations</li>\n                        <li>Verify attribute values are properly quoted</li>\n                        <li>Make sure the XAML file is valid XML</li>\n                    </ul>\n                </details>\n            </div>`;\n        }\n\n        console.log('[Preview] Converting XAML to HTML...');\n        const result = this._convertXamlToHtml(parsedXaml, 0);\n        console.log('[Preview] HTML conversion completed, length:', result.length);\n        \n        return result;\n    }\n\n    private _generateElementStructure(parsedXaml: any): string {\n        if (!parsedXaml) {\n            return '<div style=\"color: #888; text-align: center; padding: 20px;\">No elements</div>';\n        }\n\n        return this._convertXamlToTree(parsedXaml, 0);\n    }\n\n    private _convertXamlToTree(node: any, depth: number): string {\n        if (typeof node === 'string') {\n            return '';\n        }\n\n        if (typeof node === 'object') {\n            let result = '';\n\n            for (const [key, value] of Object.entries(node)) {\n                if (key.startsWith('@_')) continue;\n\n                const elementId = `element_${Math.random().toString(36).substr(2, 9)}`;\n                const icon = this._getElementIcon(key);\n\n                result += `\n                    <div class=\"tree-item\" data-element-id=\"${elementId}\" onclick=\"selectElementFromTree('${elementId}')\">\n                        <i class=\"tree-item-icon ${icon}\"></i>\n                        <span class=\"tree-item-name\">${key}</span>\n                        <span class=\"tree-item-type\">${key}</span>\n                    </div>\n                `;\n\n                if (typeof value === 'object' && value !== null) {\n                    if (!Array.isArray(value)) {\n                        const children = this._getChildElements(value);\n                        if (children.length > 0) {\n                            result += '<div class=\"tree-children\">';\n                            for (const child of children) {\n                                result += this._convertXamlToTree(child, depth + 1);\n                            }\n                            result += '</div>';\n                        }\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        return '';\n    }\n\n    private _getElementIcon(elementType: string): string {\n        const iconMap: { [key: string]: string } = {\n            'ContentPage': 'fas fa-file',\n            'StackLayout': 'fas fa-align-justify',\n            'Grid': 'fas fa-th',\n            'Label': 'fas fa-font',\n            'Button': 'fas fa-hand-pointer',\n            'Entry': 'fas fa-keyboard',\n            'Image': 'fas fa-image',\n            'Frame': 'fas fa-square',\n            'Border': 'fas fa-border-style'\n        };\n        return iconMap[elementType] || 'fas fa-cube';\n    }\n\n    private _convertXamlToHtml(node: any, depth: number): string {\n        if (typeof node === 'string') {\n            return node;\n        }\n\n        if (typeof node === 'object') {\n            let result = '';\n\n            for (const [key, value] of Object.entries(node)) {\n                if (key.startsWith('@_')) continue;\n\n                const elementId = `element_${Math.random().toString(36).substr(2, 9)}`;\n                const elementClass = this._getMauiElementClass(key);\n                const attributes = this._extractAttributes(value);\n                const content = this._getElementContent(key, attributes);\n\n                result += `<div id=\"${elementId}\" class=\"xaml-element ${elementClass}\" data-type=\"${key}\" data-attributes='${JSON.stringify(attributes)}' style=\"position: relative; ${this._buildElementStyle(key, attributes)}\">`;\n\n                if (typeof value === 'object' && value !== null) {\n                    if (Array.isArray(value)) {\n                        for (const item of value) {\n                            result += this._convertXamlToHtml(item, depth + 1);\n                        }\n                    } else {\n                        const children = this._getChildElements(value);\n                        if (children.length > 0) {\n                            for (const child of children) {\n                                result += this._convertXamlToHtml(child, depth + 1);\n                            }\n                        } else if (content) {\n                            result += content;\n                        }\n                    }\n                } else if (typeof value === 'string') {\n                    result += value;\n                } else if (content) {\n                    result += content;\n                }\n\n                result += '</div>';\n            }\n\n            return result;\n        }\n\n        return '';\n    }\n\n    private _getMauiElementClass(elementType: string): string {\n        const classMap: { [key: string]: string } = {\n            'StackLayout': 'maui-stacklayout',\n            'Grid': 'maui-grid',\n            'Label': 'maui-label',\n            'Button': 'maui-button',\n            'Entry': 'maui-entry',\n            'Editor': 'maui-entry',\n            'Image': 'maui-image',\n            'Frame': 'maui-frame',\n            'Border': 'maui-frame'\n        };\n        return classMap[elementType] || 'maui-element';\n    }\n\n    private _extractAttributes(node: any): { [key: string]: string } {\n        const attributes: { [key: string]: string } = {};\n        if (typeof node === 'object' && node !== null) {\n            for (const [key, value] of Object.entries(node)) {\n                if (key.startsWith('@_')) {\n                    const attrName = key.substring(2);\n                    let attrValue = String(value);\n                    \n                    // Resolve resource values\n                    attrValue = this._resolveResourceValue(attrValue);\n                    \n                    attributes[attrName] = attrValue;\n                }\n            }\n        }\n        return attributes;\n    }\n\n    private _getElementContent(elementType: string, attributes: { [key: string]: string }): string {\n        const style = this._buildElementStyle(elementType, attributes);\n        \n        switch (elementType) {\n            case 'Label':\n                return `<span style=\"${style}\">${attributes.Text || 'Label Text'}</span>`;\n            case 'Button':\n                return `<button style=\"${style}\" type=\"button\">${attributes.Text || 'Button'}</button>`;\n            case 'Entry':\n                return `<input type=\"text\" placeholder=\"${attributes.Placeholder || 'Enter text...'}\" value=\"${attributes.Text || ''}\" readonly style=\"${style} width: 100%; border: 1px solid #ccc; padding: 8px; border-radius: 4px;\">`;\n            case 'Editor':\n                return `<textarea placeholder=\"${attributes.Placeholder || 'Enter text...'}\" readonly style=\"${style} width: 100%; border: 1px solid #ccc; padding: 8px; border-radius: 4px; resize: vertical;\">${attributes.Text || ''}</textarea>`;\n            case 'Image':\n                return `<div style=\"${style} background: #f0f0f0; color: #888; text-align: center; padding: 20px; border-radius: 4px; display: flex; align-items: center; justify-content: center;\">\n                    <i class=\"fas fa-image\" style=\"margin-right: 8px;\"></i>\n                    Image: ${attributes.Source || 'No source'}\n                </div>`;\n            case 'Frame':\n            case 'Border':\n                return `<div style=\"${style} border: 1px solid #ccc; border-radius: 8px; padding: 16px;\"></div>`;\n            default:\n                return '';\n        }\n    }\n\n    private _buildElementStyle(elementType: string, attributes: { [key: string]: string }): string {\n        const styles: string[] = [];\n        \n        console.log(`[Style] Building style for ${elementType}:`, attributes);\n        \n        // Background color\n        if (attributes.BackgroundColor) {\n            const resolvedColor = this._resolveResourceValue(attributes.BackgroundColor);\n            console.log(`[Style] Background color: ${attributes.BackgroundColor} -> ${resolvedColor}`);\n            styles.push(`background-color: ${resolvedColor}`);\n        }\n        \n        // Text color\n        if (attributes.TextColor) {\n            styles.push(`color: ${attributes.TextColor}`);\n        }\n        \n        // Font properties\n        if (attributes.FontSize) {\n            styles.push(`font-size: ${attributes.FontSize}px`);\n        }\n        \n        if (attributes.FontAttributes) {\n            if (attributes.FontAttributes.includes('Bold')) {\n                styles.push('font-weight: bold');\n            }\n            if (attributes.FontAttributes.includes('Italic')) {\n                styles.push('font-style: italic');\n            }\n        }\n        \n        // Layout properties\n        if (attributes.Margin) {\n            styles.push(`margin: ${this._parseThickness(attributes.Margin)}`);\n        }\n        \n        if (attributes.Padding) {\n            styles.push(`padding: ${this._parseThickness(attributes.Padding)}`);\n        }\n        \n        // Border properties for Frame/Border\n        if (elementType === 'Frame' || elementType === 'Border') {\n            if (attributes.BorderColor) {\n                styles.push(`border-color: ${attributes.BorderColor}`);\n            }\n            if (attributes.CornerRadius) {\n                styles.push(`border-radius: ${attributes.CornerRadius}px`);\n            }\n            if (attributes.HasShadow === 'True') {\n                styles.push('box-shadow: 0 2px 4px rgba(0,0,0,0.1)');\n            }\n        }\n        \n        // Opacity\n        if (attributes.Opacity) {\n            styles.push(`opacity: ${attributes.Opacity}`);\n        }\n        \n        return styles.join('; ');\n    }\n\n    private _parseThickness(thickness: string): string {\n        if (!thickness) return '0';\n        \n        const values = thickness.split(',').map(v => v.trim() + 'px');\n        \n        if (values.length === 1) {\n            return values[0];\n        } else if (values.length === 2) {\n            return `${values[1]} ${values[0]}`; // vertical horizontal\n        } else if (values.length === 4) {\n            return `${values[0]} ${values[1]} ${values[2]} ${values[3]}`; // top right bottom left\n        }\n        \n        return thickness;\n    }\n\n    private _getChildElements(node: any): any[] {\n        const children: any[] = [];\n        for (const [key, value] of Object.entries(node)) {\n            if (!key.startsWith('@_') && key !== '#text') {\n                if (Array.isArray(value)) {\n                    children.push(...value);\n                } else {\n                    children.push({ [key]: value });\n                }\n            }\n        }\n        return children;\n    }\n\n    private _buildElementMap(xamlContent: string) {\n        this._elementMap.clear();\n        const lines = xamlContent.split('\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            const elementMatch = line.match(/<(\\w+)(?:\\s|>)/);\n\n            if (elementMatch && !line.trim().startsWith('</')) {\n                const elementName = elementMatch[1];\n                let endLine = i;\n\n                if (line.includes('/>')) {\n                    endLine = i;\n                } else if (line.includes(`</${elementName}>`)) {\n                    endLine = i;\n                } else {\n                    for (let j = i + 1; j < lines.length; j++) {\n                        if (lines[j].includes(`</${elementName}>`)) {\n                            endLine = j;\n                            break;\n                        }\n                    }\n                }\n\n                const elementId = `element_${Math.random().toString(36).substr(2, 9)}`;\n                this._elementMap.set(elementId, {\n                    startLine: i,\n                    endLine: endLine,\n                    elementName: elementName\n                });\n            }\n        }\n    }\n\n    private _handleElementSelection(elementId: string, elementType: string, properties: any) {\n        console.log(`Element selected: ${elementId} (${elementType})`, properties);\n\n        // Highlight in code editor\n        this._highlightElementInCode(elementId, elementType);\n\n        // Update properties sidebar with detailed information\n        if (this._propertiesProvider) {\n            // Find the element in our parsed structure or create it\n            const xamlElement = this._findOrCreateElementForSelection(elementId, elementType, properties);\n            this._propertiesProvider.setSelectedElement(xamlElement);\n        }\n\n        // Update status\n        vscode.window.setStatusBarMessage(`Selected: ${elementType} (${elementId.substring(0, 8)}...)`, 3000);\n    }\n\n    private _findOrCreateElementForSelection(elementId: string, elementType: string, properties: any): XamlElement {\n        // Try to find the element in the current document structure\n        if (this._currentDocument) {\n            const xamlContent = this._currentDocument.getText();\n            const parsedXaml = this._parseXaml(xamlContent);\n            \n            if (parsedXaml) {\n                const foundElement = this._findElementInParsed(parsedXaml, elementType);\n                if (foundElement) {\n                    return foundElement;\n                }\n            }\n        }\n        \n        // Fallback: create element from provided data\n        const attributes = properties || {};\n        const elementProperties = this._buildPropertiesFromAttributes(elementType, attributes);\n        \n        return {\n            id: elementId,\n            type: elementType,\n            name: attributes.Name || attributes['x:Name'] || elementType,\n            properties: elementProperties,\n            children: []\n        };\n    }\n\n    private _findElementInParsed(node: any, targetType: string): XamlElement | null {\n        if (typeof node !== 'object' || node === null) {\n            return null;\n        }\n\n        for (const [key, value] of Object.entries(node)) {\n            if (key.startsWith('@_')) continue;\n\n            if (key === targetType) {\n                const elementId = `element_${Math.random().toString(36).substr(2, 9)}`;\n                const attributes = this._extractAttributes(value);\n                const properties = this._buildPropertiesFromAttributes(key, attributes);\n                \n                return {\n                    id: elementId,\n                    type: key,\n                    name: attributes.Name || attributes['x:Name'] || key,\n                    properties: properties,\n                    children: []\n                };\n            }\n\n            // Recursively search in child elements\n            if (typeof value === 'object') {\n                const childElements = this._getChildElements(value);\n                for (const child of childElements) {\n                    const result = this._findElementInParsed(child, targetType);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private _handlePropertyChange(elementId: string, property: string, value: string) {\n        console.log(`Property changed: ${elementId}.${property} = ${value}`);\n        if (!this._currentDocument) return;\n        vscode.window.showInformationMessage(`Updated: ${property} = ${value}`);\n    }\n\n    private _handlePlatformChange(platform: string) {\n        this._currentPlatform = platform;\n        console.log(`Platform changed to: ${platform}`);\n        vscode.window.showInformationMessage(`Preview platform: ${platform}`);\n    }\n\n    private _handleElementMove(elementId: string, position: { x: number, y: number }) {\n        console.log(`Element moved: ${elementId}`, position);\n        vscode.window.showInformationMessage(`Element moved to (${position.x}, ${position.y})`);\n    }\n\n    private _handleElementResize(elementId: string, size: { width: number, height: number }) {\n        console.log(`Element resized: ${elementId}`, size);\n        vscode.window.showInformationMessage(`Element resized to ${size.width}x${size.height}`);\n    }\n\n    private _handleElementRotation(elementId: string, rotation: string) {\n        console.log(`Element rotated: ${elementId}`, rotation);\n        vscode.window.showInformationMessage(`Element rotated to ${rotation}`);\n    }\n\n    private _highlightElementInCode(elementId: string, elementType: string) {\n        if (!this._currentDocument || !this._elementHighlightDecoration) {\n            return;\n        }\n\n        const activeEditor = vscode.window.activeTextEditor;\n        if (!activeEditor || activeEditor.document !== this._currentDocument) {\n            return;\n        }\n\n        activeEditor.setDecorations(this._elementHighlightDecoration, []);\n\n        if (elementType && elementType !== 'unknown') {\n            this._highlightElementByType(elementType, activeEditor);\n        }\n    }\n\n    private _highlightElementByType(elementType: string, activeEditor: vscode.TextEditor) {\n        if (!this._elementHighlightDecoration) return;\n\n        const text = activeEditor.document.getText();\n        const lines = text.split('\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (line.includes(`<${elementType}`) && !line.trim().startsWith('</')) {\n                let endLine = i;\n\n                if (line.includes('/>')) {\n                    endLine = i;\n                } else if (line.includes(`</${elementType}>`)) {\n                    endLine = i;\n                } else {\n                    for (let j = i + 1; j < lines.length; j++) {\n                        if (lines[j].includes(`</${elementType}>`)) {\n                            endLine = j;\n                            break;\n                        }\n                    }\n                }\n\n                const startPosition = new vscode.Position(i, 0);\n                const endPosition = new vscode.Position(endLine, lines[endLine].length);\n                const range = new vscode.Range(startPosition, endPosition);\n\n                const decoration = {\n                    range: range,\n                    hoverMessage: `Selected: ${elementType}`\n                };\n\n                activeEditor.setDecorations(this._elementHighlightDecoration, [decoration]);\n                activeEditor.revealRange(range, vscode.TextEditorRevealType.InCenterIfOutsideViewport);\n                break;\n            }\n        }\n    }\n\n    private _loadResourceDictionaries(document: vscode.TextDocument) {\n        console.log('[Resources] Loading resource dictionaries...');\n        this._resourceDictionary.clear();\n        this._styleCache.clear();\n        \n        const workspaceFolder = vscode.workspace.getWorkspaceFolder(document.uri);\n        if (!workspaceFolder) {\n            console.log('[Resources] No workspace folder found');\n            return;\n        }\n\n        const workspacePath = workspaceFolder.uri.fsPath;\n        console.log('[Resources] Workspace path:', workspacePath);\n        \n        // Look for App.xaml and other resource files\n        this._loadResourcesFromPattern(workspacePath, '**/App.xaml');\n        this._loadResourcesFromPattern(workspacePath, '**/Resources/**/*.xaml');\n        this._loadResourcesFromPattern(workspacePath, '**/Styles/**/*.xaml');\n        this._loadResourcesFromPattern(workspacePath, '**/*Resources.xaml');\n        \n        // Extract resources from current document\n        this._extractResourcesFromXaml(document.getText());\n        \n        console.log('[Resources] Loaded resources:', this._resourceDictionary.size);\n        console.log('[Resources] Loaded styles:', this._styleCache.size);\n        console.log('[Resources] Resource keys:', Array.from(this._resourceDictionary.keys()));\n    }\n\n    private _loadResourcesFromPattern(workspacePath: string, pattern: string) {\n        try {\n            const files = vscode.workspace.findFiles(pattern);\n            files.then(uris => {\n                uris.forEach(uri => {\n                    try {\n                        const content = fs.readFileSync(uri.fsPath, 'utf8');\n                        this._extractResourcesFromXaml(content);\n                    } catch (error) {\n                        console.log(`Could not read resource file: ${uri.fsPath}`, error);\n                    }\n                });\n            });\n        } catch (error) {\n            console.log(`Error loading resources from pattern ${pattern}:`, error);\n        }\n    }\n\n    private _extractResourcesFromXaml(xamlContent: string) {\n        try {\n            const parser = new XMLParser({\n                ignoreAttributes: false,\n                attributeNamePrefix: '@_'\n            });\n            const parsed = parser.parse(xamlContent);\n            \n            // Extract ResourceDictionary elements\n            this._traverseForResources(parsed);\n        } catch (error) {\n            console.log('Error parsing XAML for resources:', error);\n        }\n    }\n\n    private _traverseForResources(node: any, path: string = '') {\n        if (typeof node !== 'object' || node === null) {\n            return;\n        }\n\n        for (const [key, value] of Object.entries(node)) {\n            if (key.startsWith('@_')) continue;\n\n            if (key === 'ResourceDictionary' || key.includes('Resources')) {\n                this._extractResourcesFromNode(value);\n            } else if (key === 'Style') {\n                this._extractStyleFromNode(value);\n            } else if (typeof value === 'object') {\n                this._traverseForResources(value, `${path}.${key}`);\n            }\n        }\n    }\n\n    private _extractResourcesFromNode(resourceNode: any) {\n        if (typeof resourceNode !== 'object' || resourceNode === null) {\n            return;\n        }\n\n        for (const [key, value] of Object.entries(resourceNode)) {\n            if (key.startsWith('@_')) continue;\n\n            if (typeof value === 'object' && value !== null && (value as any)['@_x:Key']) {\n                const resourceKey = (value as any)['@_x:Key'];\n                this._resourceDictionary.set(resourceKey, value);\n            }\n        }\n    }\n\n    private _extractStyleFromNode(styleNode: any) {\n        if (typeof styleNode !== 'object' || styleNode === null) {\n            return;\n        }\n\n        const targetType = (styleNode as any)['@_TargetType'];\n        const key = (styleNode as any)['@_x:Key'] || targetType;\n        \n        if (key) {\n            this._styleCache.set(key, styleNode);\n        }\n    }\n\n    private _initializeThemeColors() {\n        console.log('[Theme] Initializing theme colors for platform:', this._currentPlatform);\n        \n        // Initialize common MAUI theme colors\n        this._themeColors.clear();\n        \n        // Primary colors\n        this._themeColors.set('Primary', '#512BD4');\n        this._themeColors.set('Secondary', '#DFD8F7');\n        this._themeColors.set('Tertiary', '#2B0B98');\n        \n        // Gray colors\n        this._themeColors.set('White', '#FFFFFF');\n        this._themeColors.set('Black', '#000000');\n        this._themeColors.set('Gray100', '#E1E1E1');\n        this._themeColors.set('Gray200', '#C8C8C8');\n        this._themeColors.set('Gray300', '#ACACAC');\n        this._themeColors.set('Gray400', '#919191');\n        this._themeColors.set('Gray500', '#6E6E6E');\n        this._themeColors.set('Gray600', '#404040');\n        this._themeColors.set('Gray900', '#212121');\n        this._themeColors.set('Gray950', '#141414');\n        \n        // Platform-specific colors based on current platform\n        switch (this._currentPlatform) {\n            case 'android':\n                this._themeColors.set('PlatformPrimary', '#4CAF50');\n                this._themeColors.set('PlatformAccent', '#FF9800');\n                break;\n            case 'ios':\n                this._themeColors.set('PlatformPrimary', '#007AFF');\n                this._themeColors.set('PlatformAccent', '#FF3B30');\n                break;\n            case 'windows':\n                this._themeColors.set('PlatformPrimary', '#0078D4');\n                this._themeColors.set('PlatformAccent', '#8764B8');\n                break;\n        }\n        \n        console.log('[Theme] Initialized theme colors:', Array.from(this._themeColors.keys()));\n    }\n\n    private _resolveResourceValue(value: string): string {\n        if (!value) return value;\n\n        // Handle StaticResource and DynamicResource\n        const staticResourceMatch = value.match(/\\{StaticResource\\s+([^}]+)\\}/);\n        if (staticResourceMatch) {\n            const resourceKey = staticResourceMatch[1].trim();\n            const resource = this._resourceDictionary.get(resourceKey);\n            if (resource) {\n                return this._extractResourceValue(resource);\n            }\n        }\n\n        const dynamicResourceMatch = value.match(/\\{DynamicResource\\s+([^}]+)\\}/);\n        if (dynamicResourceMatch) {\n            const resourceKey = dynamicResourceMatch[1].trim();\n            const resource = this._resourceDictionary.get(resourceKey);\n            if (resource) {\n                return this._extractResourceValue(resource);\n            }\n        }\n\n        // Handle theme colors\n        if (this._themeColors.has(value)) {\n            return this._themeColors.get(value)!;\n        }\n\n        return value;\n    }\n\n    private _extractResourceValue(resource: any): string {\n        if (typeof resource === 'string') {\n            return resource;\n        }\n        \n        if (typeof resource === 'object' && resource !== null) {\n            // For Color resources\n            if ((resource as any)['@_Color']) {\n                return (resource as any)['@_Color'];\n            }\n            \n            // For SolidColorBrush resources\n            if ((resource as any)['@_Color'] || (resource as any).Color) {\n                return (resource as any)['@_Color'] || (resource as any).Color;\n            }\n            \n            // For other resource types, try to find a value\n            for (const [key, value] of Object.entries(resource)) {\n                if (!key.startsWith('@_') && typeof value === 'string') {\n                    return value;\n                }\n            }\n        }\n        \n        return '';\n    }\n}"]}