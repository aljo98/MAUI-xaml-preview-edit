{"version":3,"file":"zoomManager.js","sourceRoot":"","sources":["../src/zoomManager.ts"],"names":[],"mappings":";;;AAAA,6CAA6C;AAC7C,MAAa,WAAW;IAKtB;QAJQ,gBAAW,GAAG,GAAG,CAAC;QACT,cAAS,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAChE,cAAS,GAAG,CAAC,CAAC;QAGpB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC3C,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAEM,OAAO,CAAC,OAAe;QAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IAChE,CAAC;IAEM,MAAM;QACX,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAEM,OAAO;QACZ,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAEM,cAAc;QACnB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,oEAAoE;IAC7D,oBAAoB;QACzB,OAAO;;;yCAG8B,IAAI,CAAC,WAAW;uCAClB,IAAI,CAAC,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAwF5C,CAAC;IACR,CAAC;CACF;AAzID,kCAyIC","sourcesContent":["// Zoom and viewport management functionality\r\nexport class ZoomManager {\r\n  private currentZoom = 100;\r\n  private readonly zoomSteps = [25, 50, 75, 100, 125, 150, 200, 300, 400];\r\n  private zoomLevel = 1;\r\n\r\n  constructor() {\r\n    console.log('[ZoomManager] Initialized');\r\n  }\r\n\r\n  public getCurrentZoom(): number {\r\n    return this.currentZoom;\r\n  }\r\n\r\n  public setZoom(newZoom: number): void {\r\n    this.currentZoom = Math.max(25, Math.min(400, newZoom));\r\n    this.zoomLevel = this.currentZoom / 100;\r\n    console.log(`[ZoomManager] Zoom set to ${this.currentZoom}%`);\r\n  }\r\n\r\n  public zoomIn(): void {\r\n    const currentIndex = this.zoomSteps.indexOf(this.currentZoom);\r\n    if (currentIndex < this.zoomSteps.length - 1) {\r\n      this.setZoom(this.zoomSteps[currentIndex + 1]);\r\n    }\r\n  }\r\n\r\n  public zoomOut(): void {\r\n    const currentIndex = this.zoomSteps.indexOf(this.currentZoom);\r\n    if (currentIndex > 0) {\r\n      this.setZoom(this.zoomSteps[currentIndex - 1]);\r\n    }\r\n  }\r\n\r\n  public zoomActualSize(): void {\r\n    this.setZoom(100);\r\n  }\r\n\r\n  public getZoomLevel(): number {\r\n    return this.zoomLevel;\r\n  }\r\n\r\n  // Generate the JavaScript code that will be executed in the webview\r\n  public getWebviewZoomScript(): string {\r\n    return `\r\n            class WebViewZoomManager {\r\n                constructor() {\r\n                    this.currentZoom = ${this.currentZoom};\r\n                    this.zoomLevel = ${this.zoomLevel};\r\n                    this.setupEventListeners();\r\n                }\r\n\r\n                applyZoom() {\r\n                    const deviceWrapper = document.querySelector('.device-wrapper');\r\n                    if (deviceWrapper) {\r\n                        deviceWrapper.style.transform = 'scale(' + this.zoomLevel + ')';\r\n                    }\r\n                }\r\n\r\n                updateZoomDisplay() {\r\n                    const zoomDisplay = document.getElementById('zoomLevel');\r\n                    if (zoomDisplay) {\r\n                        zoomDisplay.textContent = this.currentZoom + '%';\r\n                    }\r\n                }\r\n\r\n                setZoom(newZoom) {\r\n                    this.currentZoom = Math.max(25, Math.min(400, newZoom));\r\n                    this.zoomLevel = this.currentZoom / 100;\r\n                    this.applyZoom();\r\n                    this.updateZoomDisplay();\r\n                    console.log('[WebViewZoomManager] Zoom set to ' + this.currentZoom + '%');\r\n                }\r\n\r\n                fitToViewport() {\r\n                    const viewport = document.querySelector('.preview-viewport');\r\n                    const deviceWrapper = document.querySelector('.device-wrapper');\r\n                    const deviceFrame = document.getElementById('deviceFrame');\r\n                    \r\n                    if (!viewport || !deviceWrapper || !deviceFrame) {\r\n                        console.warn('[WebViewZoomManager] Elements not found for fit to viewport');\r\n                        return;\r\n                    }\r\n                    \r\n                    // Reset transform to get original size\r\n                    deviceWrapper.style.transform = 'scale(1)';\r\n                    \r\n                    const deviceRect = deviceFrame.getBoundingClientRect();\r\n                    const viewportRect = viewport.getBoundingClientRect();\r\n                    \r\n                    const scaleX = (viewportRect.width - 80) / deviceRect.width;\r\n                    const scaleY = (viewportRect.height - 80) / deviceRect.height;\r\n                    const scale = Math.min(scaleX, scaleY, 1);\r\n                    \r\n                    const zoomPercent = Math.round(scale * 100);\r\n                    this.setZoom(zoomPercent);\r\n                }\r\n\r\n                setupEventListeners() {\r\n                    document.addEventListener('DOMContentLoaded', () => {\r\n                        const zoomInBtn = document.getElementById('zoomIn');\r\n                        const zoomOutBtn = document.getElementById('zoomOut');\r\n                        const zoomFitBtn = document.getElementById('zoomFit');\r\n                        const zoomActualBtn = document.getElementById('zoomActual');\r\n\r\n                        if (zoomInBtn) zoomInBtn.addEventListener('click', () => this.zoomIn());\r\n                        if (zoomOutBtn) zoomOutBtn.addEventListener('click', () => this.zoomOut());\r\n                        if (zoomFitBtn) zoomFitBtn.addEventListener('click', () => this.fitToViewport());\r\n                        if (zoomActualBtn) zoomActualBtn.addEventListener('click', () => this.zoomActualSize());\r\n\r\n                        console.log('[WebViewZoomManager] Event listeners set up');\r\n                    });\r\n                }\r\n\r\n                zoomIn() {\r\n                    const zoomSteps = [25, 50, 75, 100, 125, 150, 200, 300, 400];\r\n                    const currentIndex = zoomSteps.indexOf(this.currentZoom);\r\n                    if (currentIndex < zoomSteps.length - 1) {\r\n                        this.setZoom(zoomSteps[currentIndex + 1]);\r\n                    }\r\n                }\r\n\r\n                zoomOut() {\r\n                    const zoomSteps = [25, 50, 75, 100, 125, 150, 200, 300, 400];\r\n                    const currentIndex = zoomSteps.indexOf(this.currentZoom);\r\n                    if (currentIndex > 0) {\r\n                        this.setZoom(zoomSteps[currentIndex - 1]);\r\n                    }\r\n                }\r\n\r\n                zoomActualSize() {\r\n                    this.setZoom(100);\r\n                }\r\n            }\r\n\r\n            const webViewZoomManager = new WebViewZoomManager();\r\n        `;\r\n  }\r\n}"]}