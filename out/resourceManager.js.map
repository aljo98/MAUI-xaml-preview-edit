{"version":3,"file":"resourceManager.js","sourceRoot":"","sources":["../src/resourceManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { XMLParser } from 'fast-xml-parser';\r\n\r\n// Interface for parsed resources\r\nexport interface ParsedResource {\r\n  key: string;\r\n  value: string;\r\n  type: 'Color' | 'Style' | 'DataTemplate' | 'ControlTemplate' | 'Other';\r\n}\r\n\r\nexport interface StyleResource {\r\n  key: string;\r\n  targetType: string;\r\n  setters: { [property: string]: string };\r\n  triggers?: any[];\r\n}\r\n\r\n// Resource dictionary manager for XAML files\r\nexport class ResourceManager {\r\n  private resourceCache: Map<string, ParsedResource[]> = new Map();\r\n  private styleCache: Map<string, StyleResource[]> = new Map();\r\n  private xmlParser: XMLParser;\r\n\r\n  constructor() {\r\n    this.xmlParser = new XMLParser({\r\n      ignoreAttributes: false,\r\n      attributeNamePrefix: '@_',\r\n      textNodeName: '#text',\r\n      parseTagValue: false,\r\n      parseAttributeValue: false,\r\n      trimValues: true,\r\n      removeNSPrefix: false,\r\n      allowBooleanAttributes: true\r\n    });\r\n    console.log('[ResourceManager] Initialized');\r\n  }\r\n\r\n  public async loadResourcesForFile(xamlFilePath: string): Promise<{ resources: ParsedResource[], styles: StyleResource[] }> {\r\n    console.log(`[ResourceManager] Loading resources for: ${xamlFilePath}`);\r\n\r\n    const allResources: ParsedResource[] = [];\r\n    const allStyles: StyleResource[] = [];\r\n\r\n    try {\r\n      // Load resources from the file itself\r\n      const fileResources = await this.loadResourcesFromFile(xamlFilePath);\r\n      allResources.push(...fileResources.resources);\r\n      allStyles.push(...fileResources.styles);\r\n\r\n      // Load App.xaml resources\r\n      const appXamlPath = this.findAppXaml(xamlFilePath);\r\n      if (appXamlPath && appXamlPath !== xamlFilePath) {\r\n        const appResources = await this.loadResourcesFromFile(appXamlPath);\r\n        allResources.push(...appResources.resources);\r\n        allStyles.push(...appResources.styles);\r\n      }\r\n\r\n      // Look for additional resource dictionaries\r\n      const resourceDictPaths = await this.findResourceDictionaries(xamlFilePath);\r\n      for (const dictPath of resourceDictPaths) {\r\n        if (dictPath !== xamlFilePath && dictPath !== appXamlPath) {\r\n          const dictResources = await this.loadResourcesFromFile(dictPath);\r\n          allResources.push(...dictResources.resources);\r\n          allStyles.push(...dictResources.styles);\r\n        }\r\n      }\r\n\r\n      console.log(`[ResourceManager] Loaded ${allResources.length} resources and ${allStyles.length} styles`);\r\n      return { resources: allResources, styles: allStyles };\r\n\r\n    } catch (error) {\r\n      console.error('[ResourceManager] Error loading resources:', error);\r\n      return { resources: [], styles: [] };\r\n    }\r\n  }\r\n\r\n  private async loadResourcesFromFile(filePath: string): Promise<{ resources: ParsedResource[], styles: StyleResource[] }> {\r\n    if (this.resourceCache.has(filePath)) {\r\n      const cachedResources = this.resourceCache.get(filePath) || [];\r\n      const cachedStyles = this.styleCache.get(filePath) || [];\r\n      return { resources: cachedResources, styles: cachedStyles };\r\n    }\r\n\r\n    try {\r\n      if (!fs.existsSync(filePath)) {\r\n        console.log(`[ResourceManager] File not found: ${filePath}`);\r\n        return { resources: [], styles: [] };\r\n      }\r\n\r\n      const content = fs.readFileSync(filePath, 'utf-8');\r\n      const parsed = this.xmlParser.parse(content);\r\n\r\n      const resources = this.extractResources(parsed);\r\n      const styles = this.extractStyles(parsed);\r\n\r\n      // Cache the results\r\n      this.resourceCache.set(filePath, resources);\r\n      this.styleCache.set(filePath, styles);\r\n\r\n      console.log(`[ResourceManager] Loaded from ${path.basename(filePath)}: ${resources.length} resources, ${styles.length} styles`);\r\n      return { resources, styles };\r\n\r\n    } catch (error) {\r\n      console.error(`[ResourceManager] Error parsing ${filePath}:`, error);\r\n      return { resources: [], styles: [] };\r\n    }\r\n  }\r\n\r\n  private extractResources(parsedXml: any): ParsedResource[] {\r\n    const resources: ParsedResource[] = [];\r\n\r\n    const findResourceDictionaries = (obj: any): void => {\r\n      if (!obj || typeof obj !== 'object') return;\r\n\r\n      // Look for ResourceDictionary elements\r\n      if (obj['ResourceDictionary'] || obj['Application.Resources'] || obj['ContentPage.Resources'] || obj['Grid.Resources']) {\r\n        const resourceDict = obj['ResourceDictionary'] || obj['Application.Resources'] || obj['ContentPage.Resources'] || obj['Grid.Resources'];\r\n        this.processResourceDictionary(resourceDict, resources);\r\n      }\r\n\r\n      // Recursively search in all properties\r\n      for (const key in obj) {\r\n        if (key.includes('Resources')) {\r\n          this.processResourceDictionary(obj[key], resources);\r\n        }\r\n        findResourceDictionaries(obj[key]);\r\n      }\r\n    };\r\n\r\n    findResourceDictionaries(parsedXml);\r\n    return resources;\r\n  }\r\n\r\n  private extractStyles(parsedXml: any): StyleResource[] {\r\n    const styles: StyleResource[] = [];\r\n\r\n    const findStyles = (obj: any): void => {\r\n      if (!obj || typeof obj !== 'object') return;\r\n\r\n      // Look for Style elements\r\n      if (obj['Style']) {\r\n        const styleArray = Array.isArray(obj['Style']) ? obj['Style'] : [obj['Style']];\r\n        for (const style of styleArray) {\r\n          const styleResource = this.parseStyle(style);\r\n          if (styleResource) {\r\n            styles.push(styleResource);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Recursively search\r\n      for (const key in obj) {\r\n        findStyles(obj[key]);\r\n      }\r\n    };\r\n\r\n    findStyles(parsedXml);\r\n    return styles;\r\n  }\r\n\r\n  private processResourceDictionary(resourceDict: any, resources: ParsedResource[]): void {\r\n    if (!resourceDict) return;\r\n\r\n    for (const key in resourceDict) {\r\n      if (key.startsWith('@_')) continue; // Skip attributes\r\n\r\n      const items = Array.isArray(resourceDict[key]) ? resourceDict[key] : [resourceDict[key]];\r\n\r\n      for (const item of items) {\r\n        if (item && typeof item === 'object' && item['@_x:Key']) {\r\n          const resourceKey = item['@_x:Key'];\r\n          let resourceValue = '';\r\n          let resourceType: ParsedResource['type'] = 'Other';\r\n\r\n          if (key === 'Color') {\r\n            resourceValue = item['#text'] || item.toString();\r\n            resourceType = 'Color';\r\n          } else if (key === 'SolidColorBrush') {\r\n            // Handle SolidColorBrush Color attribute or inner text\r\n            resourceValue = item['@_Color'] || item['Color'] || item['#text'] || '';\r\n            resourceType = 'Color';\r\n          } else if (key === 'Style') {\r\n            resourceValue = JSON.stringify(item);\r\n            resourceType = 'Style';\r\n          } else if (key === 'DataTemplate') {\r\n            resourceValue = JSON.stringify(item);\r\n            resourceType = 'DataTemplate';\r\n          } else if (key === 'ControlTemplate') {\r\n            resourceValue = JSON.stringify(item);\r\n            resourceType = 'ControlTemplate';\r\n          } else {\r\n            resourceValue = item['#text'] || JSON.stringify(item);\r\n          }\r\n\r\n          resources.push({\r\n            key: resourceKey,\r\n            value: resourceValue,\r\n            type: resourceType\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseStyle(styleObj: any): StyleResource | null {\r\n    if (!styleObj || !styleObj['@_TargetType']) return null;\r\n\r\n    const style: StyleResource = {\r\n      key: styleObj['@_x:Key'] || '',\r\n      targetType: styleObj['@_TargetType'],\r\n      setters: {}\r\n    };\r\n\r\n    if (styleObj['Setter']) {\r\n      const setters = Array.isArray(styleObj['Setter']) ? styleObj['Setter'] : [styleObj['Setter']];\r\n      for (const setter of setters) {\r\n        if (setter['@_Property'] && setter['@_Value']) {\r\n          style.setters[setter['@_Property']] = setter['@_Value'];\r\n        }\r\n      }\r\n    }\r\n\r\n    return style;\r\n  }\r\n\r\n  private findAppXaml(currentFilePath: string): string | null {\r\n    let dir = path.dirname(currentFilePath);\r\n    const maxLevels = 5; // Prevent infinite loops\r\n    let level = 0;\r\n\r\n    while (level < maxLevels) {\r\n      const appXamlPath = path.join(dir, 'App.xaml');\r\n      if (fs.existsSync(appXamlPath)) {\r\n        console.log(`[ResourceManager] Found App.xaml at: ${appXamlPath}`);\r\n        return appXamlPath;\r\n      }\r\n\r\n      const parentDir = path.dirname(dir);\r\n      if (parentDir === dir) break; // Reached root\r\n      dir = parentDir;\r\n      level++;\r\n    }\r\n\r\n    console.log('[ResourceManager] App.xaml not found');\r\n    return null;\r\n  }\r\n\r\n  private async findResourceDictionaries(currentFilePath: string): Promise<string[]> {\r\n    const resourcePaths: string[] = [];\r\n    const dir = path.dirname(currentFilePath);\r\n\r\n    // Common resource dictionary file patterns\r\n    const patterns = [\r\n      '**/Resources/*.xaml',\r\n      '**/Styles/*.xaml',\r\n      '**/Themes/*.xaml',\r\n      '**/*Dictionary.xaml',\r\n      '**/*Resources.xaml'\r\n    ];\r\n\r\n    try {\r\n      const files = await vscode.workspace.findFiles(\r\n        `{${patterns.join(',')}}`,\r\n        '**/node_modules/**',\r\n        50\r\n      );\r\n\r\n      for (const file of files) {\r\n        resourcePaths.push(file.fsPath);\r\n      }\r\n\r\n      console.log(`[ResourceManager] Found ${resourcePaths.length} potential resource dictionaries`);\r\n    } catch (error) {\r\n      console.error('[ResourceManager] Error finding resource dictionaries:', error);\r\n    }\r\n\r\n    return resourcePaths;\r\n  }\r\n\r\n  public resolveStaticResource(resourceKey: string, resources: ParsedResource[]): string | null {\r\n    const resource = resources.find(r => r.key === resourceKey);\r\n    if (resource) {\r\n      console.log(`[ResourceManager] Resolved StaticResource ${resourceKey} = ${resource.value}`);\r\n      return resource.value;\r\n    }\r\n\r\n    console.log(`[ResourceManager] StaticResource ${resourceKey} not found`);\r\n    return null;\r\n  }\r\n\r\n  public resolveStyleResource(styleKey: string, styles: StyleResource[]): StyleResource | null {\r\n    const style = styles.find(s => s.key === styleKey);\r\n    if (style) {\r\n      console.log(`[ResourceManager] Resolved Style ${styleKey} for ${style.targetType}`);\r\n      return style;\r\n    }\r\n\r\n    console.log(`[ResourceManager] Style ${styleKey} not found`);\r\n    return null;\r\n  }\r\n\r\n  public clearCache(): void {\r\n    this.resourceCache.clear();\r\n    this.styleCache.clear();\r\n    console.log('[ResourceManager] Cache cleared');\r\n  }\r\n}"]}